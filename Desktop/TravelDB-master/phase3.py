#Emily Ratliff, Ashley Paek, Sonika Finch, Paul Dorsch, Rasheed Lewisfrom Tkinter import *from Tkinter import Tkkimport pymysqldef sortby(tree, col, descending):    """Sort tree contents when a column is clicked on."""    # grab values to sort    data = [(tree.set(child, col), child) for child in tree.get_children('')]    # reorder data    data.sort(reverse=descending)    for indx, item in enumerate(data):        tree.move(item[1], '', indx)    # switch the heading so that it will sort in the opposite direction    tree.heading(col,        command=lambda col=col: sortby(tree, col, int(not descending)))class myApp:    def __init__(self,mainWin):        self.mainWin = mainWin        self.mainWin.title("GTTravel.com")        self.frame1 = Frame(self.mainWin)        self.frame1.grid(row = 0, column = 1)                self.l = Label(self.frame1, text = "Sign In", font = "Verdana 24 bold")        self.l.grid(row = 1,column = 1)        self.framenew1 = Frame(self.mainWin)        self.framenew1.grid(row = 1, column = 1)                self.label2 = Label(self.framenew1,text = "Username: ", font = "Verdana 12 bold")        self.label2.grid(row = 2,column = 0,sticky = E)        self.userVar = StringVar()        self.usernameEntry = Entry(self.framenew1,textvariable = self.userVar, state = NORMAL,width = 30)        self.usernameEntry.grid(row=2,column = 1)        self.label3 = Label(self.framenew1,text = "Password: ", font = "Verdana 12 bold")        self.label3.grid(row = 3,column = 0,sticky = E)        self.passVar = StringVar()        self.PasswordEntry = Entry(self.framenew1,textvariable = self.passVar, state = NORMAL,width = 30)        self.PasswordEntry.grid(row=3,column = 1)        self.frame2 = Frame(self.mainWin)        self.frame2.grid(row=2,column = 1)        button2 = Button(self.frame2, text = "Login", command = self.LoginCheck)        button2.grid(row = 0, column = 1)        button3 = Button(self.frame2, text = "Register", command = self.Register)        button3.grid(row = 0, column = 2)        self.secondWin = Toplevel()        self.secondWin.title("GTTravel.com Registration")        self.frame3 = Frame(self.secondWin)        self.frame3.grid(row = 0,column=0)        l2 = Label(self.frame3, text = "New User Registration", font = "Verdana 24")        l2.grid(row = 0,column = 2, columnspan = 2)        label4 = Label(self.frame3, text = "Username", font = "Verdana 12 bold")        label4.grid(row = 1, column = 2, sticky = E, padx=5, pady=5)        label5 = Label(self.frame3, text = "Password", font = "Verdana 12 bold")        label5.grid(row = 2, column = 2, sticky = E, padx=5, pady=5)        label6 = Label(self.frame3, text = "Confirm Password", font = "Verdana 12 bold")        label6.grid(row = 3, column = 2, sticky = E, padx=5, pady=5)        label7 = Label(self.frame3, text = "Email", font = "Verdana 12 bold")        label7.grid(row = 4, column = 2, sticky = E, padx=5, pady=5)        self.usernVar = StringVar()        self.ps = StringVar()        self.cps = StringVar()        self.emailVar = StringVar()        self.userVarE = Entry(self.frame3,textvariable = self.usernVar, state = NORMAL,width = 30)        self.userVarE.grid(row=1,column = 3)        self.psE = Entry(self.frame3,textvariable = self.ps, state = NORMAL,width = 30)        self.psE.grid(row=2,column = 3)        self.cpsE = Entry(self.frame3,textvariable = self.cps, state = NORMAL,width = 30)        self.cpsE.grid(row=3,column =3)        self.emailVarE = Entry(self.frame3,textvariable = self.emailVar, state = NORMAL,width = 30)        self.emailVarE.grid(row=4,column = 3)        self.frame4 = Frame(self.secondWin)        self.frame4.grid(row=1,column = 0)        buttonCancel = Button(self.frame4, text = "Cancel", command = self.LoginPage)        buttonCancel.grid(row = 0,column = 0)        buttonRegister = Button(self.frame4, text = "Register", command = self.RegisterNew)        buttonRegister.grid(row = 0,column = 1)        self.secondWin.withdraw()    def LoginPage(self):        self.secondWin.withdraw()        self.mainWin.deiconify()    def Register(self):        self.mainWin.withdraw()        self.secondWin.deiconify()    def Connect(self):        #function created so that RegisteredNew and LoginCheck don't both try to connect to the data base because creates an error        try:            db = MySQLdb.connect(host='localhost', user='root', passwd='Darling', db='Travel')            return db        except:            tkMessageBox.showwarning("Error!", "Error connecting to database")    def RegisterNew(self):        self.passEntered = self.ps.get()        self.secondPassEnt = self.cps.get()        self.userNameEntered = self.usernVar.get()        self.emailEntered = self.emailVar.get()        if self.passEntered == self.secondPassEnt:            if self.userNameEntered != "" and self.passEntered != "":                self.db = self.Connect()                c = self.db.cursor()                sql = "SELECT Username, Email FROM User"                c.execute(sql)                listofusers = []                listofemails = []                for x in c:                    listofusers.append(x[0])                    listofemails.append(x[1])                if self.userNameEntered not in listofusers:                    if self.emailEntered not in listofemails:                        sql2 = "INSERT INTO User (Username, Email, Password) VALUES (%s, %s, %s)"                        c.execute( sql2, (self.userNameEntered, self.emailEntered, self.passEntered) )                        tkMessageBox.showwarning("Done","You are now registered!")                        if "@gttravel.com" in self.emailEntered:                            sql3 = "INSERT INTO Manager(M_Username, M_Email) VALUES (%s, %s)"                            c.execute(sql3, (self.userNameEntered, self.emailEntered))                            c.close()                            self.db.commit()                            self.db.close()                        else:                            sql4 = "INSERT INTO NormalUser(N_Username, N_Email) VALUES (%s, %s)"                            c.execute(sql4, (self.userNameEntered, self.emailEntered))                            c.close()                            self.db.commit()                            self.db.close()                        self.LoginPage()                    else:                        messagebox.showwarning("Error","That email has already been registered")                else:                    messagebox.showwarning("Error","That username has already been registered")            else:                messagebox.showwarning("Error","You must enter your username, password, and email!")        else:            messagebox.showwarning("Error","Your passwords must match")    def LoginCheck(self):        self.userName = self.userVar.get()        self.password = self.passVar.get()        self.db1 = self.Connect()         self.c1 = self.db1.cursor()        sql = "SELECT Username, Email, Password FROM User"        self.c1.execute(sql)        listofinfo= []        for x in self.c1:            innerList = [x[0],x[1],x[2]]            listofinfo.append(innerList)        self.val = False        for ele in listofinfo:            if ele[0] == self.userName and ele[2] == self.password:                self.saveUserName = self.userName                self.saveEmail = ele[1]                self.val = True                messagebox.showwarning("Done","You have logged in successfully")                self.c1.close()                self.db1.close()                self.mainWin.withdraw()                self.secondWin.withdraw()                if "@gttravel.com" in self.saveEmail:                    self.manHomePage()                else:                    self.normHomePage()        if self.val != True:            self.db1.close()            self.c1.close()            messagebox.showwarning("Error","You have entered an unrecognizable username/password combination")            self.LoginPage()        self.listofinfo = listofinfo    def manHomePage(self):        try:            self.mainWin.withdraw()        except:            None        try:            self.secondWin.withdraw()        except:            None        try:            self.addCityWin.withdraw()        except:            None        self.manhomeWin = Toplevel()        self.manhomeWin.title("GTTravel.com Manager Home Page")        self.frame5 = Frame(self.manhomeWin)        self.frame5.grid(row = 0, column = 0)        homLab = Label(self.frame5, text = "Select Operation", font = "Verdana 24")        homLab.pack()        homButt = Button(self.frame5, text = "Add City", width = 15, height=2, command = self.addCity)        homButt.pack()    def normHomePage(self):        try:            self.mainWin.withdraw()        except:            None        try:            self.secondWin.withdraw()        except:            None        try:            self.locSearchWin.withdraw()        except:            None        try:            self.speLocPage.withdraw()        except:            None        try:            self.countrySearchWin.withdraw()        except:            None        try:            self.writeReviewCountry.withdraw()        except:            None        try:            self.writeReviewCity.withdraw()        except:            None        try:            self.writeReviewLocation.withdraw()        except:            None        try:            self.writeReviewEvent.withdraw()        except:            None        try:            self.updateReviewWin.withdraw()        except:            None        try:            self.eventSearchWin.withdraw()        except:            None        self.normhomeWin = Toplevel()        self.normhomeWin.title("GTTravel.com User Home Page")        self.frame6 = Frame(self.normhomeWin)        self.frame6.grid(row = 1, column = 1)        nhomLab = Label(self.frame6, text = "Select Operation", width = 25, font = "Verdana 24 bold")        nhomLab.grid(row = 1, column = 1, pady=5)        homButt1 = Button(self.frame6, text = "Country Search", font= "Verdana 12 bold", width = 25, height=2, command = self.countrySearch)        homButt1.grid(row = 2, column = 1, pady=5)        homButt2 = Button(self.frame6, text = "City Search", font= "Verdana 12 bold", width = 25, height=2, command = self.citySearch)        homButt2.grid(row = 3, column = 1, pady=5)        homButt3 = Button(self.frame6, text = "Location Search", font= "Verdana 12 bold", width = 25, height=2, command = self.locationSearch)        homButt3.grid(row = 4, column = 1, pady=5)        homButt4 = Button(self.frame6, text = "Event Search", font= "Verdana 12 bold", width = 25, height=2, command = self.eventSearch)        homButt4.grid(row = 5, column = 1, pady=5)        homButt5 = Button(self.frame6, text = "Write a Review for a Country", font= "Verdana 12 bold", width = 25, height=2, command = self.writeReviewCountry)        homButt5.grid(row = 6, column = 1, pady=5)        homButt5 = Button(self.frame6, text = "Write a Review for a City", font= "Verdana 12 bold", width = 25, height=2, command = self.writeReviewCity)        homButt5.grid(row = 7, column = 1, pady=5)        homButt5 = Button(self.frame6, text = "Write a Review for a Location", font= "Verdana 12 bold", width = 25, height=2, command = self.writeReviewLocation)        homButt5.grid(row = 8, column = 1, pady=5)        homButt5 = Button(self.frame6, text = "Write a Review for a Event", font= "Verdana 12 bold", width = 25, height=2, command = self.writeReviewEvent)        homButt5.grid(row = 9, column = 1, pady=5)        homButt6 = Button(self.frame6, text = "See Past Reviews", font= "Verdana 12 bold", width = 25, height=2, command = self.previousReview)        homButt6.grid(row = 10, column = 1, pady=5)    def countrySearch(self):        try:            self.mainWin.withdraw()        except:            None        try:            self.secondWin.withdraw()        except:            None        try:            self.normhomeWin.withdraw()        except:            None        self.countrySearchWin=Toplevel()        self.countrySearchWin.title("GTTravel.com Country Search")#       self.countrySearchWin.geometry('{}x{}'.format(500, 400))        frame1=Frame(self.countrySearchWin)        frame1.grid(row=0, column=0)        frame2=Frame(self.countrySearchWin)        frame2.grid(row=1, column=0)        title=Label(frame1, text="Country Search", font = "Verdana 24 bold")        title.grid(row=0, column=1, pady=10)        name=Label(frame1, text="Name", font = "Verdana 12 bold")        name.grid(sticky=W, row=1, column=0, padx=10, pady=5)        pop=Label(frame1, text="Population <", font = "Verdana 12 bold")        pop.grid(sticky=W, row=2, column=0, padx=10, pady=5)        lang=Label(frame1, text="Languages", font = "Verdana 12 bold")        lang.grid(sticky=W, row=3, column=0, padx=10, pady=5)        backB=Button(frame2, text="Go Back", command=self.normHomePage)        backB.grid(sticky=W, row=0, column=0, padx=10)        searchB=Button(frame2, text="Search", command=self.countrySearchButton)        searchB.grid(sticky=W, row=0, column=1, padx=20)        #country drop bar        self.dbc = self.Connect()         self.c1c = self.dbc.cursor()        sql = "SELECT Country_Name FROM Country"        self.c1c.execute(sql)        alist= []        for x in self.c1c:            alist.append(x[0])        self.c1c.close()        self.dbc.close()        self.countryvar1 = StringVar()        self.countryvar1.set('')        self.option = OptionMenu(frame1, self.countryvar1, *alist)        self.option.config(width = 20)        self.option.grid(row = 1, column = 1)        self.countryPopNum=StringVar()        self.countryPopEntry=Entry(frame1, width=20, state=NORMAL, textvariable=self.countryPopNum)        self.countryPopEntry.grid(row=2, column=1, padx=10, pady=5)        self.var1 = IntVar()        self.lang1=Checkbutton(frame1, text="English", variable=self.var1).grid(sticky=W, row=3, column=1, pady=5)        self.var2 = IntVar()        self.lang2=Checkbutton(frame1, text="Spanish", variable=self.var2).grid(sticky=W, row=4, column=1, pady=5)        self.var3 = IntVar()        self.lang3=Checkbutton(frame1, text="Catalan", variable=self.var3).grid(sticky=W, row=5, column=1, pady=5)        self.var4 = IntVar()        self.lang4=Checkbutton(frame1, text="German", variable=self.var4).grid(sticky=W, row=6, column=1, pady=5)        self.var5 = IntVar()        self.lang5=Checkbutton(frame1, text="Italian", variable=self.var5).grid(sticky=W, row=7, column=1, pady=5)        self.var6 = IntVar()        self.lang6=Checkbutton(frame1, text="French", variable=self.var6).grid(sticky=W, row=8, column=1, pady=5)        self.var7 = IntVar()        self.lang7=Checkbutton(frame1, text="Flemish", variable=self.var7).grid(sticky=W, row=9, column=1, pady=5)        self.var8 = IntVar()        self.lang8=Checkbutton(frame1, text="Dutch", variable=self.var8).grid(sticky=W, row=10, column=1, pady=5)        self.var9 = IntVar()        self.lang9=Checkbutton(frame1, text="Greek", variable=self.var9).grid(sticky=W, row=11, column=1, pady=5)        self.var10 = IntVar()        self.lang10=Checkbutton(frame1, text="Valenician", variable=self.var10).grid(sticky=W, row=12, column=1, pady=5)        self.var11 = IntVar()        self.lang11=Checkbutton(frame1, text="Galician", variable=self.var11).grid(sticky=W, row=13, column=1, pady=5)        self.var12 = IntVar()        self.lang12=Checkbutton(frame1, text="Basque", variable=self.var12).grid(sticky=W, row=14, column=1, pady=5)        self.var13 = IntVar()        self.lang13=Checkbutton(frame1, text="Euskara", variable=self.var13).grid(sticky=W, row=15, column=1, pady=5)        self.var14 = IntVar()        self.lang14=Checkbutton(frame1, text="Gaelic", variable=self.var14).grid(sticky=W, row=16, column=1, pady=5)        self.var15 = IntVar()        self.lang15=Checkbutton(frame1, text="Portuguese", variable=self.var15).grid(sticky=W, row=17, column=1, pady=5)    def countrySearchButton(self):        self.countryPop = self.countryPopNum.get()        self.countryvar = self.countryvar1.get()        self.db = self.Connect()         self.c = self.db.cursor()        self.db2 = self.Connect()        self.cur = self.db2.cursor()        self.db3 = self.Connect()        self.cur3 = self.db3.cursor()        if self.countryvar1.get():            myApp.tree_columns = ("Country Name", "Population", "Capital City", "Languages")            myApp.tree_data = []            sql ="SELECT Country_Name, Population FROM Country WHERE (Country_Name = '"+self.countryvar+"');"                        self.c.execute(sql)            for x in self.c:                self.cur.execute("SELECT Capital_Name FROM Capitals AS P WHERE (P.Country = '"+str(x[0])+"');")                for y in self.cur:                    z = x + y                self.cur3.execute("SELECT DISTINCT Lang_Name FROM CountryLanguage WHERE (CountryLanguage_Country_Name = '"+str(x[0])+"');")                langs = ""                for k in self.cur3:                    langs += (str(k)[2:-3] + ", ")                langs = langs[:-2]                tup = tuple([langs])                f = z + tup                myApp.tree_data.append(f)                        else:            pop = sys.maxsize            if (self.countryPop != ""):                pop = self.countryPop            langSearch = ""            #ugly but this tests the the checkboxes and concatonates the string to insert into the query            if self.var1.get():                langSearch += str("L.Lang_Name = 'English' OR ")            if self.var2.get():                langSearch += str("L.Lang_Name = 'Spanish' OR ")            if self.var3.get():                langSearch += str("L.Lang_Name = 'Catalan' OR ")            if self.var4.get():                langSearch += str("L.Lang_Name = 'German' OR ")            if self.var5.get():                langSearch += str("L.Lang_Name = 'Italian' OR ")            if self.var6.get():                langSearch += str("L.Lang_Name = 'French' OR ")            if self.var7.get():                langSearch += str("L.Lang_Name = 'Flemish' OR ")            if self.var8.get():                langSearch += str("L.Lang_Name = 'Dutch' OR ")            if self.var9.get():                langSearch += str("L.Lang_Name = 'Greek' OR ")            if self.var10.get():                langSearch += str("L.Lang_Name = 'Valenician' OR ")            if self.var11.get():                langSearch += str("L.Lang_Name = 'Galician' OR ")            if self.var12.get():                langSearch += str("L.Lang_Name = 'Basque' OR ")            if self.var13.get():                langSearch += str("L.Lang_Name = 'Euskara' OR ")            if self.var14.get():                langSearch += str("L.Lang_Name = 'Gaelic' OR ")            if self.var15.get():                langSearch += str("L.Lang_Name = 'Portuguese' OR ")            langSearch =langSearch[:-4]                        if langSearch == "":                langSearch = "TRUE"            stringlang = str(langSearch)            sqlpop = "SELECT DISTINCT Country_Name, Population FROM Country AS C, CountryLanguage AS L WHERE (C.Population < %s) AND ("+stringlang+") AND C.Country_Name = L.CountryLanguage_Country_Name;"            self.c.execute(sqlpop, pop)                        #TABLE                        myApp.tree_columns = ("Country Name", "Population", "Capital City", "Languages")            myApp.tree_data = []            interiorData = []            for x in self.c:                self.cur.execute("SELECT Capital_Name FROM Capitals AS P WHERE (P.Country = '"+str(x[0])+"');")                for y in self.cur:                    z = x + y                self.cur3.execute("SELECT DISTINCT Lang_Name FROM CountryLanguage WHERE (CountryLanguage_Country_Name = '"+str(x[0])+"');")                langs = ""                for k in self.cur3:                    langs += (str(k)[2:-3] + ", ")                langs = langs[:-2]                tup = tuple([langs])                f = z + tup                interiorData.append(f)                for element in interiorData:                myApp.tree_data.append(element);        #TABLE WORKS LIKE THIS:        # There are variables myApp.tree_data and myApp.tree_columns        # both are arrays        # tree_columns is just an array of the column names        # tree_data is an array of tuples in this format {tuple1,tuple2,tuple3,tuple4}, the number of tuples depending on how many rows you need        # each of these tuples should have all the elements of a row        # For Example: if tuple1 is Ireland        # tuple1 = (Ireland, 4892305, Dublin, English, Gaelic)        #        #Once myApp.tree_columns and myApp.tree_names are defined, simply run the self.runTable() method below that I convienienlty created        #                                                                                                                  ^        #Thats all folks                                                                                            (What is spelling)        #Kill me now        #I really hope this works                self.c.close()        self.cur.close()        self.cur3.close()        self.db.commit()        self.db.close()        self.db2.commit()        self.db2.close()        self.db3.commit()        self.db3.close()        if myApp.tree_data == []:            tkMessageBox.showwarning("Error","There are no countries that match those parameters")        else:            #TABLE ATTEMPT            self.runTable(self.countries)    def runTable(self, object):        self.yus=Toplevel()        self.yus.title("Select")                container = ttk.Frame(self.yus)        container.pack(fill='both', expand=True)        self.tree = ttk.Treeview(container, columns=myApp.tree_columns, show="headings")        vsb = ttk.Scrollbar(container, orient="vertical", command=self.tree.yview)        hsb = ttk.Scrollbar(container, orient="horizontal", command=self.tree.xview)        self.tree.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)        self.tree.grid(column=0, row=0, sticky='nsew', in_=container)        vsb.grid(column=1, row=0, sticky='ns', in_=container)        hsb.grid(column=0, row=1, sticky='ew', in_=container)        container.grid_columnconfigure(0, weight=1)        container.grid_rowconfigure(0, weight=1)        for col in myApp.tree_columns:            self.tree.heading(col, text=col.title(),                command=lambda c=col: sortby(self.tree, c, 0))            self.tree.column(col)        for item in myApp.tree_data:            self.tree.insert('', 'end', values=item)        myApp.item = ""        self.tree.bind('<Double-1>', self.OnDoubleClick)        myApp.select = object            def OnDoubleClick(self,event):        myApp.item = (self.tree.item(self.tree.selection()))['values'][0]        myApp.select(myApp.item)    def countries(self, object):        countriesWin=Toplevel()        self.countriesWin=countriesWin        #       self.countriesWin.geometry('{}x{}'.format(500, 400))        frame = Frame(self.countriesWin)        frame.grid(row = 0, column = 0)        title=Label(frame, text="Country", font = "Verdana 24 bold")        title.grid(row=0, column=0)        frame1=Frame(self.countriesWin)        frame1.grid(row=1, column=0)        frame2=Frame(self.countriesWin)        frame2.grid(row=2, column=1)        frame3 = Frame(self.countriesWin)        frame3.grid(row = 5, column = 0)        selectB=Button(frame3, text="Go Back", command=self.countriesBack).grid(sticky=W, pady=5, row=0, column=0)        cName = Label(frame1, text = "Country: ", font = "Verdana 12 bold", width = 15)        cName.grid(row = 0,column = 0)        cName1 = Label(frame1, text = object, font = "Verdana 12", width = 15)        cName1.grid(row = 0, column = 1)        db = self.Connect()        c = db.cursor()                c.execute("SELECT Population FROM Country WHERE Country_Name = '"+object+"'")        popString = ""        for x in c:            popString += str(x[0])        cPop = Label(frame1, text = "Population: ", font = "Verdana 12 bold", width = 15)        cPop.grid(row = 1,column = 0)        cPopSt = Label(frame1, text = popString, font = "Verdana 12", width = 15)        cPopSt.grid(row = 1, column = 1)                c.execute("SELECT Capital_Name FROM Capitals AS P WHERE (P.Country = '"+object+"');")        capString = ""        for x in c:            capString += str(x[0])        cCap = Label(frame1, text = "Capital City: ", font = "Verdana 12 bold", width = 15)        cCap.grid(row = 0,column = 2)        cCap2 = Label(frame1, text = capString, font = "Verdana 12", width = 15)        cCap2.grid(row = 0, column = 3)        c.execute("SELECT DISTINCT Lang_Name FROM CountryLanguage WHERE (CountryLanguage_Country_Name = '"+object+"');")        lanString = ""        for x in c:            lanString += (str(x)[2:-3] + ", ")        lanString = lanString[:-2]        cCap1 = Label(frame1, text = "Languages: ", font = "Verdana 12 bold", width = 15)        cCap1.grid(row = 1,column = 2)        cCap3 = Label(frame1, text = lanString, font = "Verdana 12", width = 25)        cCap3.grid(row = 1, column = 3)        frame2 = Frame(self.countriesWin)        frame2.grid(row = 3, column = 0)        sslab = Label(frame2, text = "Cities:", font = "Verdana 12 bold", width = 20, justify = LEFT)        sslab.grid(sticky = W, row = 0, column = 0)        sslab1 = Label(frame2, text = "City",font = "Verdana 12 bold", relief = RAISED, width = 20)        sslab1.grid(row = 1, column = 0, sticky = E+W)        sslab2 = Label(frame2, text = "Population",font = "Verdana 12 bold", relief = RAISED, width = 20)        sslab2.grid(row = 1, column = 1)        sslab3 = Label(frame2, text = "Languages",font = "Verdana 12 bold", relief = RAISED, width = 20)        sslab3.grid(row = 1, column = 2)        sslab4 = Label(frame2, text = "Average Score",font = "Verdana 12 bold", relief = RAISED, width = 20)        sslab4.grid(row = 1, column = 3)        frame4 = Frame(self.countriesWin)        frame4.grid(row = 4, column = 0)        db = self.Connect()        c = db.cursor()        sql = "SELECT City_Name, Population FROM city WHERE city_country_name = '{}'".format(object)        c.execute(sql)        newList = []        cityList = []        aDict = {}        for x in c:            newList.append(x)            cityList.append(x[0])        for x in newList:            aDict[x[0]] = x[1]        cityLang = []        for x in cityList:            sql = "SELECT CityLanguage_City_Name, City_Lang_Name FROM CityLanguage WHERE CityLanguage_City_Name = '{}'".format(x)            c.execute(sql)            for y in c:                cityLang.append(y)        cityLangDict = {}        for ele in cityLang:            if ele[0] in cityLangDict.keys():                listInput = cityLangDict[ele[0]] + ", " + ele[1]                cityLangDict[ele[0]] = listInput            else:                cityLangDict[ele[0]] = ele[1]        sql = "SELECT City_Name, id, AVG(Score) FROM city, reviewCit WHERE city_country_name = '{}' AND id = cityID GROUP BY City_Name".format(object)        c.execute(sql)        supList = []        cityScore = {}        for x in c:            supList.append(x)        for x in supList:            cityScore[x[0]] = float(x[2])        fullList = []        for x in cityList:            try:                a = (x, aDict[x], cityLangDict[x], cityScore[x])            except:                a = (x, aDict[x], cityLangDict[x], "Null")            fullList.append(a)        for y in range(len(fullList)):            for z in range(len(fullList[y])):                l = Label(frame4, text = fullList[y][z], width = 20)                l.grid(row = y, column = z)        c.close()        db.close()                #NAMES OF VARIABLES        #object (has country name)        #cPop (has country population)        #capString (capital city)        #lanString (languages)                """        b1 = Listbox(frame1, exportselection=0, selectmode=SINGLE)        #b1.config(columns=("Country", "Capital City", "Population", "Languages"))                db=self.Connect()        cursor = db.cursor()        self.name1=self.option.get()        self.pop1=self.countryPopEntry.get()        listoflanguages = []        Englishvar = self.var1.get()        if Englishvar == 1:           listoflanguages.append("English")        Spanishvar = self.var2.get()        if Spanishvar == 1:           listoflanguages.append("Spanish")        Catalanvar = self.var3.get()        if Catalanvar == 1:           listoflanguages.append("Catalan")        Germanvar = self.var4.get()        if Germanvar == 1:           listoflanguages.append("German")        Italianvar = self.var5.get()        if Italianvar == 1:            listoflanguages.append("Italian")        Frenchvar = self.var6.get()        if Frenchvar == 1:            listoflanguages.append("French")        Flemishvar = self.var7.get()        if Flemishvar == 1:            listoflanguages.append("Flemish")        Dutchvar = self.var8.get()        if Dutchvar == 1:            listoflanguages.append("Dutch")        Greekvar = self.var9.get()        if Greekvar == 1:            listoflanguages.append("Greek")        Valenicianvar = self.var10.get()        if Valenicianvar == 1:            listoflanguages.append("Valenician")        Galicianvar = self.var11.get()        if Galicianvar == 1:            listoflanguages.append("Galicianvar")        Basquevar = self.var12.get()        if Basquevar == 1:            listoflanguages.append("Basque")        Euskaravar = self.var13.get()        if Euskaravar == 1:            listoflanguages.append("Euskara")        Gaelicvar = self.var14.get()        if Gaelicvar == 1:            listoflanguages.append("Gaelic")        Portuguesevar = self.var15.get()        if Portuguesevar == 1:            listoflanguages.append("Portuguese")        query="SELECT Country_Name, City_Country_Name, Population, CountryLanguage_Country_Name FROM Country, City, CountryLanguage"        cursor.execute(query)                if listoflanguages.len==0 and self.pop1=="" and self.name1=="":            for item in cursor.fetchall():                b1.insert(END, item)        elif self.name1!="":            x=cursor.execute("SELECT Country_Name, City_Country_Name, Population, CountryLanguage_Country_Name FROM Country, City, CountryLanguage WHERE Country_Name={}".format(self.name1))            b1.insert(END, x)        else:            messagebox.showerror("No entries available!")        """            def countriesBack(self):        try:            self.countrySearchWin.withdraw()        except:            None        try:            self.yus.withdraw()        except:            None        self.countriesWin.withdraw()        self.normhomeWin.deiconify()        return None    def citySearch(self):        self.normhomeWin.withdraw()        citySearchWin=Toplevel()#       citySearchWin.geometry('{}x{}'.format(500, 400))        self.citySearchWin=citySearchWin        frame1=Frame(self.citySearchWin)        frame1.grid(row=0, column=0)        frame2=Frame(self.citySearchWin)        frame2.grid(row=1, column=0)        title=Label(frame1, text="City Search", font = "Verdana 24 bold")        title.grid(row=0, column=1)        l1=Label(frame1, text="Name", font = "Verdana 12 bold")        l1.grid(row=1, column=0, padx=10, pady=5)        l2=Label(frame1, text="Country", font = "Verdana 12 bold")        l2.grid(row=2, column=0, padx=10, pady=5)        l3=Label(frame1, text="Population <", font = "Verdana 12 bold")        l3.grid(row=3, column=0, padx=10, pady=5)        l4=Label(frame1, text="Languages", font = "Verdana 12 bold")        l4.grid(row=4, column=0, padx=10, pady=5)        dbcity = self.Connect()         self.c2c = dbcity.cursor()        sql = "SELECT City_Name FROM City"        self.c2c.execute(sql)        alist= []        for x in self.c2c:            alist.append(x[0])        self.cityvar1 = StringVar()        self.cityvar1.set('')        self.option2 = OptionMenu(frame1, self.cityvar1, *alist)        self.option2.config(width = 20)        self.option2.grid(row = 1, column = 1)        sql2 = "SELECT Country_Name FROM Country"        self.c2c.execute(sql2)        blist= []        for x in self.c2c:            blist.append(x[0])        self.c2c.close()        dbcity.close()        self.countryvar2 = StringVar()        self.countryvar2.set('')        self.option3 = OptionMenu(frame1, self.countryvar2, *blist)        self.option3.config(width = 20)        self.option3.grid(row = 2, column = 1)                self.cityPopNum=StringVar()        self.cityPop=Entry(frame1, state=NORMAL, width=20, textvariable=self.cityPopNum)        self.cityPop.grid(row=3, column=1, pady=5, sticky=W)        self.cityVar1 = IntVar()        self.cityLang1=Checkbutton(frame1, text="English", variable=self.cityVar1).grid(row=4, column=1, sticky=W, pady=5)        self.cityVar2 = IntVar()        self.cityLang2=Checkbutton(frame1, text="Spanish", variable=self.cityVar2).grid(row=5, column=1, sticky=W, pady=5)        self.cityVar3 = IntVar()        self.cityLang3=Checkbutton(frame1, text="Catalan", variable=self.cityVar3).grid(row=6, column=1, sticky=W, pady=5)        self.cityVar4 = IntVar()        self.cityLang4=Checkbutton(frame1, text="German", variable=self.cityVar4).grid(row=7, column=1, sticky=W, pady=5)        self.cityVar5 = IntVar()        self.cityLang5=Checkbutton(frame1, text="Italian", variable=self.cityVar5).grid(row=8, column=1, sticky=W, pady=5)        self.cityVar6 = IntVar()        self.cityLang6=Checkbutton(frame1, text="French", variable=self.cityVar6).grid(row=9, column=1, sticky=W, pady=5)        self.cityVar7 = IntVar()        self.cityLang7=Checkbutton(frame1, text="Flemish", variable=self.cityVar7).grid(row=10, column=1, sticky=W, pady=5)        self.cityVar8 = IntVar()        self.cityLang8=Checkbutton(frame1, text="Dutch", variable=self.cityVar8).grid(row=11, column=1, sticky=W, pady=5)        self.cityVar9 = IntVar()        self.cityLang9=Checkbutton(frame1, text="Greek", variable=self.cityVar9).grid(row=12, column=1, sticky=W, pady=5)        self.cityVar10 = IntVar()        self.cityLang10=Checkbutton(frame1, text="Valenician", variable=self.cityVar10).grid(row=13, column=1, sticky=W, pady=5)        self.cityVar11 = IntVar()        self.cityLang11=Checkbutton(frame1, text="Galician", variable=self.cityVar11).grid(row=14, column=1, sticky=W, pady=5)        self.cityVar12 = IntVar()        self.cityLang12=Checkbutton(frame1, text="Basque", variable=self.cityVar12).grid(row=15, column=1, sticky=W, pady=5)        self.cityVar13 = IntVar()        self.cityLang13=Checkbutton(frame1, text="Euskara", variable=self.cityVar13).grid(row=16, column=1, sticky=W, pady=5)        self.cityVar14 = IntVar()        self.cityLang14=Checkbutton(frame1, text="Gaelic", variable=self.cityVar14).grid(row=17, column=1, sticky=W, pady=5)        self.cityVar15 = IntVar()        self.cityLang15=Checkbutton(frame1, text="Portuguese", variable=self.cityVar15).grid(row=18, column=1, sticky=W, pady=5)        backB=Button(frame2, text="Go Back", command=self.cityBack)        backB.grid(row=0, column=0, padx=10, pady=5, sticky=W)        searchB=Button(frame2, text="Search", command=self.citySearchButton)        searchB.grid(row=0, column=1, padx=10, pady=5, sticky=W)    def citySearchButton(self):        self.cityPop = self.cityPopNum.get()        self.cityvar = self.cityvar1.get()        self.countryvar = self.countryvar2.get()        self.db2 = self.Connect()         self.c2 = self.db2.cursor()        self.db3 = self.Connect()        self.c3 = self.db3.cursor()        self.db4 = self.Connect()        self.c4 = self.db4.cursor()        self.db5 = self.Connect()        self.c5 = self.db5.cursor()        self.db6 = self.Connect()        self.c6 = self.db5.cursor()        string = ""                if self.cityvar1.get():            myApp.tree_columns = ("City Name", "Country", "Population", "Languages", "Average Score")            myApp.tree_data = []            sql = ("SELECT City_Name, city_country_name, Population FROM city WHERE City_Name = '{}';".format(self.cityvar))                        self.c2.execute(sql)            for x in self.c2.fetchall():                self.c3.execute("SELECT City_Lang_Name FROM CityLanguage AS P WHERE P.CityLanguage_City_Name = '{}';".format(str(x[0])))                langs = ""                for k in self.c3.fetchall():                    langs += (str(k)[2:-3] + ", ")                langs = langs[:-2]                tup = tuple([langs])                f = x + tup                self.c5.execute("SELECT id FROM city WHERE City_Name='{}';".format(self.cityvar))                for new in self.c5:                    idNe = new[0]                self.c4.execute("SELECT AVG(P.Score) FROM reviewCit AS P, city AS C WHERE P.cityID = C.id AND C.id = '{}';".format(idNe))                                for y in self.c4.fetchall():                    z = f + y                myApp.tree_data.append(z)                              else:            popstring = ""            if (self.cityPop != ""):                popstring = "C.Population < '"+self.cityPop+"'"            else:                popstring = "TRUE"            langSearch = ""                                        #ugly but this tests the the checkboxes and concatonates the string to insert into the query            if self.cityVar1.get():                langSearch += str("L.City_Lang_Name = 'English' OR ")            if self.cityVar2.get():                langSearch += str("L.City_Lang_Name = 'Spanish' OR ")            if self.cityVar3.get():                langSearch += str("L.City_Lang_Name = 'Catalan' OR ")            if self.cityVar4.get():                langSearch += str("L.City_Lang_Name = 'German' OR ")            if self.cityVar5.get():                langSearch += str("L.City_Lang_Name = 'Italian' OR ")            if self.cityVar6.get():                langSearch += str("L.City_Lang_Name = 'French' OR ")            if self.cityVar7.get():                langSearch += str("L.City_Lang_Name = 'Flemish' OR ")            if self.cityVar8.get():                langSearch += str("L.City_Lang_Name = 'Dutch' OR ")            if self.cityVar9.get():                langSearch += str("L.City_Lang_Name = 'Greek' OR ")            if self.cityVar10.get():                langSearch += str("L.City_Lang_Name = 'Valenician' OR ")            if self.cityVar11.get():                langSearch += str("L.City_Lang_Name = 'Galician' OR ")            if self.cityVar12.get():                langSearch += str("L.City_Lang_Name = 'Basque' OR ")            if self.cityVar13.get():                langSearch += str("L.City_Lang_Name = 'Euskara' OR ")            if self.cityVar14.get():                langSearch += str("L.City_Lang_Name = 'Gaelic' OR ")            if self.cityVar15.get():                langSearch += str("L.City_Lang_Name = 'Portuguese' OR ")            langSearch =langSearch[:-4]            if self.countryvar == "":                string = "TRUE"            else:                string = ""                string = "C.City_Country_Name = '"+str(self.countryvar)+"'"                        if langSearch == "":                langSearch = "TRUE"            stringlang = str(langSearch)            sqlpop = "SELECT DISTINCT City_Name, City_Country_Name, Population FROM city AS C, CityLanguage AS L WHERE ("+popstring+") AND ("+stringlang+") AND C.City_Name = L.CityLanguage_City_Name AND ("+string+");"            self.c2.execute(sqlpop)                        #TABLE                        myApp.tree_columns = ("City Name", "Country", "Population", "Languages", "Average Score")            myApp.tree_data = []            interiorData = []            for x in self.c2:                self.c4.execute("SELECT DISTINCT City_Lang_Name FROM CityLanguage WHERE CityLanguage_City_Name = '"+str(x[0])+"';")                langs = ""                for k in self.c4:                    langs += (str(k)[2:-3] + ", ")                langs = langs[:-2]                tup = tuple([langs])                f = x + tup                self.c5.execute("SELECT id FROM city WHERE City_Name='{}';".format(str(x[0])))                for new in self.c5:                    idNew = new[0]                self.c6.execute("SELECT AVG(P.Score) FROM reviewCit AS P, city AS C WHERE P.cityID = C.id AND C.id = '{}';".format(idNew))                for y in self.c6:                    ff = f + y                myApp.tree_data.append(ff)            #TABLE WORKS LIKE THIS:        # There are variables myApp.tree_data and myApp.tree_columns        # both are arrays        # tree_columns is just an array of the column names        # tree_data is an array of tuples in this format {tuple1,tuple2,tuple3,tuple4}, the number of tuples depending on how many rows you need        # each of these tuples should have all the elements of a row        # For Example: if tuple1 is Ireland        # tuple1 = (Ireland, 4892305, Dublin, English, Gaelic)        #        #Once myApp.tree_columns and myApp.tree_names are defined, simply run the self.runTable() method below that I convienienlty created        #                                                                                                                  ^        #Thats all folks                                                                                            (What is spelling)        #Kill me now        #I really hope this works                self.c2.close()        self.c3.close()        self.c4.close()        self.db2.commit()        self.db2.close()        self.db3.commit()        self.db3.close()        self.db4.commit()        self.db4.close()        self.db5.commit()        self.db5.close()        self.db6.commit()        self.db6.close()        if myApp.tree_data == []:            tkMessageBox.showwarning("Error","There are no cities that match those parameters")        else:            #TABLE ATTEMPT            self.runTable(self.cities)    def cities(self, object):        citiesWin=Toplevel()        self.citiesWin=citiesWin        #       self.citiesWin.geometry('{}x{}'.format(500, 400))        frame = Frame(self.citiesWin)        frame.grid(row = 0, column = 0)        title=Label(frame, text="City", font = "Verdana 24 bold")        title.grid(row=0, column=0)        frame1=Frame(self.citiesWin)        frame1.grid(row=1, column=0)        frame2=Frame(self.citiesWin)        frame2.grid(row=2, column=0)        frame3 = Frame(self.citiesWin)        frame3.grid(row = 3, column = 0)        selectB=Button(frame3, text="Back", command=self.cityBack).grid(row=0, column=0)        cName = Label(frame1, text = "Name: ", width = 20, font = "Verdana 12 bold")        cName.grid(row = 0,column = 0)        cName1 = Label(frame1, text = object, font = "Verdana 12", width = 20)        cName1.grid(row = 0, column = 1)        db = self.Connect()        c = db.cursor()        l1=Label(frame1, text="GPS: ", width=20, font = "Verdana 12 bold").grid(row=1, column=0)        l2=Label(frame1, text="Languages: ", width=20, font = "Verdana 12 bold").grid(row=2, column=0)        l3=Label(frame1, text="Locations within: ", width=20, font = "Verdana 12 bold").grid(row=3, column=0)        l4=Label(frame1, text="Country", width=20, font = "Verdana 12 bold").grid(row=0, column=2)        l5=Label(frame1, text="Population: ", width=20, font = "Verdana 12 bold").grid(row=1, column=2)        l6=Label(frame1, text="Average Review Score: ", width=20, font = "Verdana 12 bold").grid(row=2, column=2)                country= (self.tree.item(self.tree.selection()))['values'][1]        l7 = Label(frame1, text = country, font = "Verdana 12", width = 20).grid(row=0, column=3, sticky=W)        pop=(self.tree.item(self.tree.selection()))['values'][2]        l8=Label(frame1, text=pop, font="Verdana 12", width=20).grid(row=1, column=3, sticky=W)        lang=(self.tree.item(self.tree.selection()))['values'][3]        l9=Label(frame1, text=lang, font="Verdana 12", width=20).grid(row=2, column=1, sticky=W)        avgS=(self.tree.item(self.tree.selection()))['values'][4]        l10=Label(frame1, text=avgS, font="Verdana 12", width=20).grid(row=2, column=3, sticky=W)        sql="SELECT latitude, longitude FROM city WHERE city_country_name='{}' AND City_Name='{}' AND Population='{}';".format(country, object, pop)          c.execute(sql)        aList=c.fetchall()        gps="{} , {}".format(aList[0][0], aList[0][1])        l11=Label(frame1, text=gps, width=15, font = "Verdana 12").grid(row=1, column=1)        sql = "SELECT id FROM city WHERE City_Name='{}';".format(object)        c.execute(sql)        idAList = []        for x in c:            idAList.append(x)        idA = idAList[0][0]        db.commit()        c.close()        db.close()        loc1=Label(frame2, text="City", width=20,font = "Verdana 12 bold", relief = RAISED).grid(sticky=W, row=0, column=0)        loc2=Label(frame2, text="Population", width=20, font = "Verdana 12 bold", relief = RAISED).grid(sticky=W, row=0, column=1)        loc3=Label(frame2, text="Languages", width=20, font = "Verdana 12 bold", relief = RAISED).grid(sticky=W, row=0, column=2)        loc4=Label(frame2, text="Avg. Score", width=20,font = "Verdana 12 bold", relief = RAISED).grid(sticky=W, row=0, column=3)        loc5=Label(frame2, text=object, width=20, justify=LEFT, font = "Verdana 12").grid(sticky=W, row=1, column=0)        loc6=Label(frame2, text=(self.tree.item(self.tree.selection()))['values'][2], width=20, justify=LEFT, font = "Verdana 12").grid(sticky=W, row=1, column=1)        loc7=Label(frame2, text=(self.tree.item(self.tree.selection()))['values'][3], width=20, justify=LEFT, font = "Verdana 12").grid(sticky=W, row=1, column=2)        loc8=Label(frame2, text=(self.tree.item(self.tree.selection()))['values'][4], width=20, justify=LEFT, font = "Verdana 12").grid(sticky=W, row=1, column=3)                     sslab = Label(frame3, text = "Reviews:", width = 20, justify = LEFT, font = "Verdana 12 bold")        sslab.grid(sticky = W, row = 0, column = 0)        sslab1 = Label(frame3, text = "Username",font = "Verdana 12 bold", relief = RAISED, width = 20)        sslab1.grid(row = 1, column = 0, sticky = E+W)        sslab2 = Label(frame3, text = "Date",font = "Verdana 12 bold", relief = RAISED, width = 20)        sslab2.grid(row = 1, column = 1)        sslab3 = Label(frame3, text = "Score",font = "Verdana 12 bold", relief = RAISED, width = 20)        sslab3.grid(row = 1, column = 2)        sslab4 = Label(frame3, text = "Description",font = "Verdana 12 bold", relief = RAISED, width = 20)        sslab4.grid(row = 1, column = 3)        frame4 = Frame(self.citiesWin)        frame4.grid(row = 5, column = 0)        db2 = self.Connect()        c2 = db2.cursor()        sql = "SELECT Review_N_Username, Date, Score, Description FROM reviewCit WHERE cityID = '{}'".format(idA)        c2.execute(sql)        newList = []        for x in c2:            newList.append(x)        for y in range(len(newList)):            for z in range(len(newList[y])):                l = Label(frame4, text = newList[y][z], width = 20)                l.grid(row = y, column = z)        db2.commit()        c2.close()        db2.close()        backFrame = Frame(self.citiesWin)        backFrame.grid(row = 10, column = 0)        backB=Button(backFrame, text="Go Back", command=self.citiesBack)        backB.grid(row=0, column=0, sticky=W, pady=5)    def cityBack(self):        self.citySearchWin.withdraw()        self.normhomeWin.deiconify()        return None    def citiesBack(self):        self.citiesWin.withdraw()        self.yus.withdraw()        self.citySearchWin.withdraw()        self.normhomeWin.deiconify()        return None            def locationSearch(self):        try:            self.mainWin.withdraw()        except:            None        try:            self.secondWin.withdraw()        except:            None        try:            self.normhomeWin.withdraw()        except:            None        try:            self.locPage.withdraw()        except:            None        self.locSearchWin = Toplevel()        self.locSearchWin.title("GTTravel.com Location Search")#       self.locSearchWin.geometry('{}x{}'.format(500, 400))        self.frameLoc = Frame(self.locSearchWin)        self.frameLoc.grid(row = 0, column = 0)        lab1 = Label(self.frameLoc, text = "Location Search", font = "Verdana 24 bold")        lab1.grid(row = 0, column = 1)        lab2 = Label(self.frameLoc, text = "Name", font = "Verdana 12 bold")        lab2.grid(sticky=W, row = 1, column = 0)        lab3 = Label(self.frameLoc, text = "City", font = "Verdana 12 bold")        lab3.grid(sticky=W, row = 2, column = 0)        lab4 = Label(self.frameLoc, text = "Cost between: ", font = "Verdana 12 bold")        lab4.grid(sticky=W, row = 3, column = 0)        lab4 = Label(self.frameLoc, text = "Category", font = "Verdana 12 bold")        lab4.grid(sticky=W, row = 5, column = 0)        lab5 = Label(self.frameLoc, text = "Student Discount? (y or n)", font = "Verdana 12 bold")        lab5.grid(sticky=W, row = 4, column = 0)        self.locnameVar = StringVar()        e1 = Entry(self.frameLoc, textvariable = self.locnameVar, width = 20)        e1.grid(row = 1, column = 1)        self.dbloc = self.Connect()         self.cloc = self.dbloc.cursor()        sql = "SELECT City_Name FROM city"        self.cloc.execute(sql)        alist= []        for x in self.cloc:            alist.append(x[0])        self.cloc.close()        self.dbloc.close()        self.loccityvar = StringVar()        self.loclowC = StringVar()        self.lochighC = StringVar()        self.discount = StringVar()        self.loccityvar.set('')        option = OptionMenu(self.frameLoc, self.loccityvar, *alist)        option.config(width = 20)        option.grid(sticky=W, row = 2, column = 1)        e3 = Entry(self.frameLoc, textvariable = self.loclowC, width = 5)        e3.grid(row = 3, column = 1, sticky = "W")        costLab = Label(self.frameLoc, text = " and ")        costLab.grid(row = 3, column = 1)        e4 = Entry(self.frameLoc, textvariable = self.lochighC, width = 5)        e4.grid(row = 3, column = 1, sticky = "E")        e5 = Entry(self.frameLoc, textvariable = self.discount, width = 20)        e5.grid(row = 4, column = 1)        #how to display cost        self.lvar1 = IntVar()        self.llang1=Checkbutton(self.frameLoc, text="Church", variable=self.lvar1).grid(sticky=W, row=5, column=1, pady=5)        self.lvar2 = IntVar()        self.llang2=Checkbutton(self.frameLoc, text="Memorial", variable=self.lvar2).grid(sticky=W, row=6, column=1, pady=5)        self.lvar3 = IntVar()        self.llang3=Checkbutton(self.frameLoc, text="Museum", variable=self.lvar3).grid(sticky=W, row=7, column=1, pady=5)        self.lvar4 = IntVar()        self.llang4=Checkbutton(self.frameLoc, text="Park", variable=self.lvar4).grid(sticky=W, row=8, column=1, pady=5)        self.lvar5 = IntVar()        self.llang5=Checkbutton(self.frameLoc, text="Plaza", variable=self.lvar5).grid(sticky=W, row=9, column=1, pady=5)        self.lvar6 = IntVar()        self.llang6=Checkbutton(self.frameLoc, text="Restaraunt", variable=self.lvar6).grid(sticky=W, row=10, column=1, pady=5)        self.lvar7 = IntVar()        self.llang7=Checkbutton(self.frameLoc, text="Stadium", variable=self.lvar7).grid(sticky=W, row=11, column=1, pady=5)        self.lvar8 = IntVar()        self.llang8=Checkbutton(self.frameLoc, text="Other", variable=self.lvar8).grid(sticky=W, row=12, column=1, pady=5)        gobackButton = Button(self.frameLoc, text = "Go Back", command = self.normHomePage)        gobackButton.grid(sticky=W, row = 13, column = 0)        submitButton = Button(self.frameLoc, text = "Submit", command = self.locPage)        submitButton.grid(sticky=W, row = 13, column = 3)    def locPage(self):        self.lnamVar = self.locnameVar.get()        self.llC = str(self.loclowC.get())        self.lhC = str(self.lochighC.get())        self.lcitVar = str(self.loccityvar.get())        self.lsd = str(self.discount.get())                self.db = self.Connect()         self.c = self.db.cursor()        myApp.tree_columns = ("Name", "City", "Cost", "Type", "Avg Score")        myApp.tree_data = []                namStr = ""        apStr = ""        if self.lnamVar != "":            apStr = str(self.lnamVar)            apStr = apStr.replace("'", "''")            namStr = "Name = '"+apStr+"'"        else:            namStr = "TRUE"        lsd = ""        if self.lsd == "y":            lsd = "student_discount = '1'"        elif self.lsd == "n":            lsd = "student_discount = '0'"        else:            lsd = "TRUE"                    citStr = ""        if self.lcitVar != "":            citStr = "Location_City_Name = '"+str(self.lcitVar)+"'"        else :            citStr = "TRUE"        costStr = ""        if (self.llC != "" and self.lhC != ""):            costStr = "Cost >= '"+self.llC+"') AND (Cost <= '"+self.lhC+"'"        else:            costStr = "TRUE"                typSearch = ""        #ugly but this tests the the checkboxes and concatonates the string to insert into the query        if self.lvar1.get():            typSearch += str("Type = 'Church' OR ")        if self.lvar2.get():            typSearch += str("Type= 'Memorial' OR ")        if self.lvar3.get():            typSearch += str("Type= 'Museum' OR ")        if self.lvar4.get():            typSearch += str("Type = 'Park' OR ")        if self.lvar5.get():            typSearch += str("Type= 'Plaza' OR ")        if self.lvar6.get():            typSearch += str("Type = 'Restaurant' OR ")        if self.lvar7.get():            typSearch += str("Type = 'Stadium' OR ")        if self.lvar8.get():            typSearch += str("Type = 'Other' OR ")        typSearch = typSearch[:-4]                if typSearch == "":            typSearch = "TRUE"        stringtyp = str(typSearch)        sqlpop = "SELECT Name, Location_City_Name, Cost, Type, id FROM Location WHERE ("+namStr+") AND ("+citStr+") AND ("+stringtyp+") AND ("+lsd+") AND ("+costStr+");"        self.c.execute(sqlpop)        db2 = self.Connect()        cur2 = db2.cursor()        for x in self.c:            lid = str(x[4])            x = x[:-1]            cur2.execute("SELECT AVG(R.Score) FROM ReviewLoc as R, Location as L WHERE (L.id = R.locationID) AND (L.id = '"+lid+"');")            for y in cur2:                x += y            myApp.tree_data.append(x)        if myApp.tree_data == []:            tkMessageBox.showwarning("Error","There are no events that match those parameters")        else:            #TABLE ATTEMPT            self.runTable(self.speLocPage)    def speLocPage(self,object):        try:            self.locPageWin.withdraw()        except:            None        self.speLocPageWin = Toplevel()        self.speLocPageWin.title("GTTravel.com Selected Location Search")#       self.speLocPage.geometry('{}x{}'.format(500, 400))        frame = Frame(self.speLocPageWin)        frame.grid(row = 0, column = 0)        lab = Label(frame, text = "Location", font = "Verdana 24 bold")        lab.grid(row = 0, column = 0)        frame1 = Frame(self.speLocPageWin)        frame1.grid(row = 1, column = 0)        lab1 = Label(frame1, text = "Name", padx = 20, font = "Verdana 12 bold")        lab1.grid(sticky = W, row = 0, column = 0)        lab2 = Label(frame1, text = "Cost", padx = 20, font = "Verdana 12 bold")        lab2.grid(sticky = W, row = 1, column = 0)        lab3 = Label(frame1, text = "Category", padx = 20, font = "Verdana 12 bold")        lab3.grid(sticky = W, row = 2, column = 0)        lab5 = Label(frame1, text = "Address", padx = 20, font = "Verdana 12 bold")        lab5.grid(sticky = W, row = 0, column = 2)        lab6 = Label(frame1, text = "Student Discount?", padx = 20, font = "Verdana 12 bold")        lab6.grid(sticky = W, row = 1, column = 2)        lab7 = Label(frame1, text = "Average Review Score", padx = 20, font = "Verdana 12 bold")        lab7.grid(sticky = W, row = 2, column = 2)        #labels for top        locName = object        cityName = (self.tree.item(self.tree.selection()))['values'][1]        lab1_1 = Label(frame1, text = locName,font = "Verdana 12")        lab1_1.grid(sticky = W, row = 0, column = 1)        cost = (self.tree.item(self.tree.selection()))['values'][2]        lab2_1 = Label(frame1, text = cost,font = "Verdana 12")        lab2_1.grid(sticky = W, row = 1, column = 1)        typeLoc = (self.tree.item(self.tree.selection()))['values'][3]        lab2_2 = Label(frame1, text = typeLoc,font = "Verdana 12")        lab2_2.grid(sticky = W, row = 2, column = 1)        avgScore = (self.tree.item(self.tree.selection()))['values'][4]        lab3_1 = Label(frame1, text = avgScore,font = "Verdana 12")        lab3_1.grid(sticky = W, row = 2, column = 3)        locName = locName.replace("'" , "''")        sql = "SELECT Address, student_discount, id FROM location WHERE Name = '{}' AND Location_City_Name = '{}' AND Cost = '{}' AND Type = '{}'".format(locName, cityName, cost, typeLoc)        db = self.Connect()        c = db.cursor()        c.execute(sql)        aList = []        for x in c:            aList.append(x)        address = aList[0][0]        studentDiscount = aList[0][1]        if studentDiscount == 0:            stD = "No"        else:            stD = "Yes"        ida = aList[0][2]        c.close()        db.close()        lab6_1 = Label(frame1, text = address,font = "Verdana 12")        lab6_1.grid(sticky = W, row = 0, column = 3)        lab8_1 = Label(frame1, text = stD,font = "Verdana 12")        lab8_1.grid(sticky = W, row = 1, column = 3)        #event labels        frame2 = Frame(self.speLocPageWin)        frame2.grid(row = 2, column = 0)        lab4 = Label(frame2, text = "Events: ")        lab4.grid(sticky = W, row = 0, column = 0)        slab1 = Label(frame2, text = "Event",font = "Verdana 12 bold", relief = RAISED, width = 22)        slab1.grid(row = 1, column = 0)        slab2 = Label(frame2, text = "Date",font = "Verdana 12 bold", relief = RAISED, width = 22)        slab2.grid(row = 1, column = 1)        slab3 = Label(frame2, text = "Time",font = "Verdana 12 bold", relief = RAISED, width = 22)        slab3.grid(row = 1, column = 2)        slab4 = Label(frame2, text = "Category",font = "Verdana 12 bold", relief = RAISED, width = 22)        slab4.grid(row = 1, column = 3)        slab5 = Label(frame2, text = "Average Score",font = "Verdana 12 bold", relief = RAISED, width = 22)        slab5.grid(row = 1, column = 4)        #event table        frame6 = Frame(self.speLocPageWin)        frame6.grid(row = 3, column = 0)        db = self.Connect()        c = db.cursor()        sql = "SELECT Name, event.Date, StartTime, Category, id, AVG(Score) FROM event, reviewEvent WHERE Address = '{}' AND id = eventID GROUP BY id".format(address)        c.execute(sql)        doList = []        for x in c:            doList.append(x)        for y in range(len(doList)):            for z in range(len(doList[y])):                if z == 4:                    None                else:                    l = Label(frame6, text = doList[y][z], width = 20)                    l.grid(row = y, column = z)        c.close()        db.close()                #reviews labels        frame3 = Frame(self.speLocPageWin)        frame3.grid(row = 4, column = 0)        sslab = Label(frame3, text = "Reviews:")        sslab.grid(sticky = W, row = 0, column = 0)        sslab1 = Label(frame3, text = "Username",font = "Verdana 12 bold", relief = RAISED, width = 27)        sslab1.grid(row = 1, column = 0)        sslab2 = Label(frame3, text = "Date",font = "Verdana 12 bold", relief = RAISED, width = 28)        sslab2.grid(row = 1, column = 1)        sslab3 = Label(frame3, text = "Score",font = "Verdana 12 bold", relief = RAISED, width = 27)        sslab3.grid(row = 1, column = 2)        sslab4 = Label(frame3, text = "Description",font = "Verdana 12 bold", relief = RAISED, width = 28)        sslab4.grid(row = 1, column = 3)        #reviews table        frame4 = Frame(self.speLocPageWin)        frame4.grid(row = 5, column = 0)        db = self.Connect()        c = db.cursor()        sql = "SELECT Review_N_Username, Date, Score, Description FROM reviewLoc WHERE locationID = '{}'".format(ida)        c.execute(sql)        newList = []        for x in c:            newList.append(x)        for y in range(len(newList)):            for z in range(len(newList[y])):                l = Label(frame4, text = newList[y][z], width = 27)                l.grid(row = y, column = z)        c.close()        db.close()        #back        backFrame = Frame(self.speLocPageWin)        backFrame.grid(row = 6, column = 0)        goback = Button(backFrame, text = "Go Back", command = self.locBack)        goback.grid(pady=5, row = 0, column = 0)    def locBack(self):        try:            self.locSearchWin.withdraw()        except:            None        try:            self.yus.withdraw()        except:            None        self.speLocPageWin.withdraw()        self.normhomeWin.deiconify()        return None        def eventSearch(self):        try:            self.mainWin.withdraw()        except:            None        try:            self.secondWin.withdraw()        except:            None        try:            self.normhomeWin.withdraw()        except:            None        try:            self.evPageWin.withdraw()        except:            None        self.eventSearchWin = Toplevel()        self.eventSearchWin.title("GTTravel.com Event Search")#       self.eventSearchWin.geometry('{}x{}'.format(500, 400))        self.frameEv = Frame(self.eventSearchWin)        self.frameEv.grid(row = 0, column = 0)        lab1 = Label(self.frameEv, text = "Event Search", font = "Verdana 24 bold")        lab1.grid(sticky=W, pady=5, row = 0, column = 1)        lab2 = Label(self.frameEv, text = "Name", font = "Verdana 12 bold")        lab2.grid(sticky=W, pady=5, row = 1, column = 0)        lab3 = Label(self.frameEv, text = "City", font = "Verdana 12 bold")        lab3.grid(sticky=W, pady=5, row = 2, column = 0)        lab4 = Label(self.frameEv, text = "Date (yyyy-mm-dd)", font = "Verdana 12 bold")        lab4.grid(sticky=W, pady=5, row = 3, column = 0)        lab4 = Label(self.frameEv, text = "Cost between: ", font = "Verdana 12 bold")        lab4.grid(sticky=W, pady=5, row = 4, column = 0)        lab5 = Label(self.frameEv, text = "Category", font = "Verdana 12 bold")        lab5.grid(sticky=W, pady=5, row = 6, column = 0)        lab6 = Label(self.frameEv, text = "Student Discount? (y or n)", font = "Verdana 12 bold")        lab6.grid(sticky=W, pady=5, row = 5, column = 0)        self.nameVar = StringVar()        self.dateVar = StringVar()        self.lowC = StringVar()        self.highC = StringVar()        self.esd1 = StringVar()        e1 = Entry(self.frameEv, textvariable = self.nameVar, width = 20)        e1.grid(row = 1, column = 1)        e2 = Entry(self.frameEv, textvariable = self.dateVar, width = 20)        e2.grid(row = 3, column = 1)        e3 = Entry(self.frameEv, textvariable = self.lowC, width = 5)        e3.grid(row = 4, column = 1, sticky = "W")        costLab = Label(self.frameEv, text = " and ")        costLab.grid(row = 4, column = 1)        e4 = Entry(self.frameEv, textvariable = self.highC, width = 5)        e4.grid(row = 4, column = 1, sticky = "E")        e6 = Entry(self.frameEv, textvariable = self.esd1, width = 20)        e6.grid(row = 5, column = 1)        self.dbev = self.Connect()         self.cev = self.dbev.cursor()        sql = "SELECT City_Name FROM city"        self.cev.execute(sql)        alist= []        for x in self.cev:            alist.append(x[0])        self.cev.close()        self.dbev.close()        self.cityvar = StringVar()        self.cityvar.set('')        option = OptionMenu(self.frameEv, self.cityvar, *alist)        option.config(width = 20)        option.grid(row = 2, column = 1)        #date        #how to display cost        self.lvar1 = IntVar()        self.llang1=Checkbutton(self.frameEv, text="Concert", variable=self.lvar1).grid(sticky=W, pady=5, row=6, column=1)        self.lvar2 = IntVar()        self.llang2=Checkbutton(self.frameEv, text="Sports Match", variable=self.lvar2).grid(sticky=W, pady=5, row=7, column=1)        self.lvar3 = IntVar()        self.llang3=Checkbutton(self.frameEv, text="Race", variable=self.lvar3).grid(sticky=W, pady=5, row=8, column=1)        self.lvar4 = IntVar()        self.llang4=Checkbutton(self.frameEv, text="Festival", variable=self.lvar4).grid(sticky=W, pady=5, row=9, column=1)        self.lvar5 = IntVar()        self.llang5=Checkbutton(self.frameEv, text="Presentation", variable=self.lvar5).grid(sticky=W, pady=5, row=10, column=1)        self.lvar6 = IntVar()        self.llang6=Checkbutton(self.frameEv, text="Other", variable=self.lvar6).grid(sticky=W, pady=5, row=11, column=1)        gobackButton = Button(self.frameEv, text = "Go Back", command = self.normHomePage)        gobackButton.grid(row = 12, column = 0)        submitButton = Button(self.frameEv, text = "Submit", command = self.evPage)        submitButton.grid(row = 12, column = 1)    def evBack(self):        self.eventSearchWin.withdraw()        self.normhomeWin.deiconify()        return None            def evPage(self):        self.namVar = self.nameVar.get()        self.datVar = str(self.dateVar.get())        self.lC = str(self.lowC.get())        self.hC = str(self.highC.get())        self.citVar = str(self.cityvar.get())        self.esd = str(self.esd1.get())                self.db = self.Connect()         self.c = self.db.cursor()        myApp.tree_columns = ("Name", "City", "Date", "Time", "Cost", "Catagory", "Avg Score")        myApp.tree_data = []                nStr = ""         if self.namVar != "":            nStr = "Name = '"+self.namVar+"'"        else:            nStr = "TRUE"        citStr = ""        if self.citVar != "":            citStr = "Event_City_Name = '"+str(self.citVar)+"'"        else :            citStr = "TRUE"                dateStr =  ""        if (self.datVar != ""):            dateStr = "Date = '"+self.datVar+"'"        else:            dateStr = "TRUE"        costStr = ""        if (self.lC != "" and self.hC != ""):            costStr = "Cost >= '"+self.lC+"') AND (Cost <= '"+self.hC+"'"        else:            costStr = "TRUE"        esd = ""        if self.esd == "y":            esd = "studentdiscount = '1'"        elif self.esd == "n":            esd = "studentdiscount = '0'"        else:            esd = "TRUE"                catSearch = ""        #ugly but this tests the the checkboxes and concatonates the string to insert into the query        if self.lvar1.get():            catSearch += str("Category = 'Concert' OR ")        if self.lvar2.get():            catSearch += str("Category= 'Sports Match' OR ")        if self.lvar3.get():            catSearch += str("Category = 'Race' OR ")        if self.lvar4.get():            catSearch += str("Category = 'Festival' OR ")        if self.lvar5.get():            catSearch += str("Category = 'Presentation' OR ")        if self.lvar6.get():            catSearch += str("Category = 'Other' OR ")        catSearch = catSearch[:-4]                if catSearch == "":            catSearch = "TRUE"        stringcat = str(catSearch)        sqlpop = "SELECT Name, Event_City_Name, Date, StartTime, Cost, Category, id FROM Event WHERE ("+esd+") AND ("+nStr+") AND ("+citStr+") AND ("+stringcat+") AND ("+dateStr+") AND ("+costStr+");"        self.c.execute(sqlpop)        db9 = self.Connect()        cur2 = db9.cursor()        for x in self.c:            eid = str(x[6])            x = x[:-1]            cur2.execute("SELECT AVG(R.Score) FROM ReviewEvent as R, Event as E WHERE (E.id = R.eventID) AND (E.id = '"+eid+"');")            for y in cur2:                x += y            myApp.tree_data.append(x)        if myApp.tree_data == []:            tkMessageBox.showwarning("Error","There are no events that match those parameters")        else:            #TABLE ATTEMPT            self.runTable(self.speEvPage)                    def speEvPage(self, object):        try:            self.evPageWin.withdraw()        except:            None        self.speEvPageWin = Toplevel()        self.speEvPageWin.title("GTTravel.com Selected Event Search")#       self.speEvPage.geometry('{}x{}'.format(500, 400))        frame = Frame(self.speEvPageWin)        frame.grid(row = 0, column = 0)        lab = Label(frame, text = "Event", font = "Verdana 24 bold")        lab.grid(row = 0, column = 0)        frame1 = Frame(self.speEvPageWin)        frame1.grid(row = 1, column = 0)        lab1 = Label(frame1, text = "Name", font = "Verdana 12 bold")        lab1.grid(sticky = W, row = 0, column = 0)        lab2 = Label(frame1, text = "Date & Time", font = "Verdana 12 bold")        lab2.grid(sticky = W, row = 1, column = 0)        lab3 = Label(frame1, text = "Cost", font = "Verdana 12 bold")        lab3.grid(sticky = W, row = 2, column = 0)        lab4 = Label(frame1, text = "Category", font = "Verdana 12 bold")        lab4.grid(sticky = W, row = 3, column = 0)        lab5 = Label(frame1, text = "Description:", font = "Verdana 12 bold")        lab5.grid(sticky = W, row = 4, column = 0)        lab6 = Label(frame1, text = "Location", font = "Verdana 12 bold")        lab6.grid(sticky = W, row = 0, column = 3, padx = 15)        lab7 = Label(frame1, text = "End Time", font = "Verdana 12 bold")        lab7.grid(sticky = W, row = 1, column = 3, padx = 15)        lab8 = Label(frame1, text = "Student Discount?", font = "Verdana 12 bold")        lab8.grid(sticky = W, row = 2, column = 3, padx = 15)        #labels for top        eventName = object        cityName = (self.tree.item(self.tree.selection()))['values'][1]        lab1_1 = Label(frame1, text = eventName,font = "Verdana 12")        lab1_1.grid(sticky = W, row = 0, column = 1)        date = (self.tree.item(self.tree.selection()))['values'][2]        lab2_1 = Label(frame1, text = date,font = "Verdana 12")        lab2_1.grid(sticky = W, row = 1, column = 1)        time = (self.tree.item(self.tree.selection()))['values'][3]        lab2_2 = Label(frame1, text = time,font = "Verdana 12")        lab2_2.grid(sticky = W, row = 1, column = 2)        cost = (self.tree.item(self.tree.selection()))['values'][4]        lab3_1 = Label(frame1, text = cost,font = "Verdana 12")        lab3_1.grid(sticky = W, row = 2, column = 1)        category = (self.tree.item(self.tree.selection()))['values'][5]        lab4_1 = Label(frame1, text = category,font = "Verdana 12")        lab4_1.grid(sticky = W, row = 3, column = 1)        sql = "SELECT Description, Address, EndTime, StudentDiscount, id FROM event WHERE Name = '{}' AND Event_City_Name = '{}' AND Date = '{}' AND StartTime = '{}' AND Cost = '{}' AND Category = '{}'".format(eventName, cityName, date, time, cost, category)        db = self.Connect()        c = db.cursor()        c.execute(sql)        aList = []        for x in c:            aList.append(x)        description = aList[0][0]        descL = len(description)        try:            desc1 = description[0:85]            try:                desc2 = description[len(desc1):len(desc1)+85]                try:                    desc3 = description[len(desc1)+85:descL]                except:                    None            except:                desc2 = description[len(desc1):descL]        except:            desc1 = description        address = aList[0][1]        endTime = aList[0][2]        studentDiscount = aList[0][3]        if studentDiscount == 0:            stD = "No"        else:            stD = "Yes"        ida = aList[0][4]        c.close()        db.close()        frame2 = Frame(self.speEvPageWin)        frame2.grid(row = 2, column = 0)        lab5_1 = Label(frame2, text = desc1,font = "Verdana 12", width = 85)        lab5_1.grid(row = 0, column = 0)        try:            lab5_11 = Label(frame2, text = desc2,font = "Verdana 12", width = 85)            lab5_11.grid(row = 1, column = 0)        except:            None        try:            lab5_11 = Label(frame2, text = desc3,font = "Verdana 12", width = 85)            lab5_11.grid(row = 2, column = 0)        except:            None        lab6_1 = Label(frame1, text = address,font = "Verdana 12")        lab6_1.grid(sticky = W, row = 0, column = 4)        lab7_1 = Label(frame1, text = endTime,font = "Verdana 12")        lab7_1.grid(sticky = W, row = 1, column = 4)        lab8_1 = Label(frame1, text = stD,font = "Verdana 12")        lab8_1.grid(sticky = W, row = 2, column = 4)                frame3 = Frame(self.speEvPageWin)        frame3.grid(row = 5, column = 0)        goback = Button(frame3, text = "Go Back", command = self.eventBack)        goback.grid(row = 2, column = 0)        #add table of of reviews        frame5 = Frame(self.speEvPageWin)        frame5.grid(row = 3, column = 0)        sslab = Label(frame5, text = "Reviews:", width = 20, justify = LEFT)        sslab.grid(sticky = W, row = 0, column = 0)        sslab1 = Label(frame5, text = "Username",font = "Verdana 12 bold", relief = RAISED, width = 20)        sslab1.grid(row = 1, column = 0, sticky = E+W)        sslab2 = Label(frame5, text = "Date",font = "Verdana 12 bold", relief = RAISED, width = 20)        sslab2.grid(row = 1, column = 1)        sslab3 = Label(frame5, text = "Score",font = "Verdana 12 bold", relief = RAISED, width = 20)        sslab3.grid(row = 1, column = 2)        sslab4 = Label(frame5, text = "Description",font = "Verdana 12 bold", relief = RAISED, width = 20)        sslab4.grid(row = 1, column = 3)        frame4 = Frame(self.speEvPageWin)        frame4.grid(row = 4, column = 0)        db = self.Connect()        c = db.cursor()        sql = "SELECT Review_N_Username, Date, Score, Description FROM reviewEvent WHERE eventID = '{}'".format(ida)        c.execute(sql)        newList = []        for x in c:            newList.append(x)        for y in range(len(newList)):            for z in range(len(newList[y])):                l = Label(frame4, text = newList[y][z], width = 20)                l.grid(row = y, column = z)        c.close()        db.close()    def eventBack(self):        try:            self.eventSearchWin.withdraw()        except:            None        try:            self.yus.withdraw()        except:            None        self.speEvPageWin.withdraw()        self.normHomePage()        return None    def writeReviewCountry(self):        try:            self.normhomeWin.withdraw()        except:            None                self.writeReviewCountry = Toplevel()        self.writeReviewCountry.title("GTTravel.com Write a Country Review") #       self.writeReviewCountry.geometry('{}x{}'.format(500, 400))        frame = Frame(self.writeReviewCountry)        frame.grid(row = 0, column = 0)        lab = Label(frame, text = "Write a Review for a Country", font = "Verdana 24 bold")        lab.grid(row = 0, column = 0)        frame1 = Frame(self.writeReviewCountry)        frame1.grid(row = 1, column = 0)        lab1 = Label(frame1, text = "Country", font = "Verdana 12 bold")        lab1.grid(row = 0, column = 0)        lab2 = Label(frame1, text = "Date (yyyy-mm-dd)", font = "Verdana 12 bold")        lab2.grid(row = 1, column = 0)        lab3 = Label(frame1, text = "Score (1-10, 10 being the best)", font = "Verdana 12 bold")        lab3.grid(row = 2, column = 0)        lab4 = Label(frame1, text = "Description", font = "Verdana 12 bold")        lab4.grid(row = 3, column = 0)        dbc = self.Connect()         c1c = dbc.cursor()        sql = "SELECT Country_Name FROM Country"        c1c.execute(sql)        alist= []        for x in c1c:            alist.append(x[0])        c1c.close()        dbc.close()        self.countryReviewVar = StringVar()        self.countryReviewVar.set('')        option = OptionMenu(frame1, self.countryReviewVar, *alist)        option.config(width = 20)        option.grid(row = 0, column = 1)        self.CountryDateEntry = StringVar()        dateEntry = Entry(frame1, textvariable = self.CountryDateEntry, width = 10)        dateEntry.grid(row = 1, column = 1)        self.countryScoreEntry = StringVar()        scoreEntry = Entry(frame1, textvariable = self.countryScoreEntry, width = 2)        scoreEntry.grid(row = 2, column = 1)        self.countryDescriptionEntry = StringVar()        descriptionEntry = Entry(frame1, textvariable = self.countryDescriptionEntry, width = 30)        descriptionEntry.grid(row = 3, column = 1, rowspan = 3, columnspan = 2)        submit = Button(frame1, text = "Submit", command = self.countrySubmit)        submit.grid(row = 6, column = 3)        goback = Button(frame1, text = "Go Back", command = self.normHomePage)        goback.grid(row = 6, column = 0, sticky=W, pady=5)    def countrySubmit(self):        try:            countryDate = self.CountryDateEntry.get()            country_Review_N = self.userName            countryScore = int(self.countryScoreEntry.get())            desc = self.countryDescriptionEntry.get()            countryReviewVar = self.countryReviewVar.get()            dbc = self.Connect()             c1c = dbc.cursor()            sql = "SELECT id FROM country WHERE Country_Name = '{}'".format(countryReviewVar)            c1c.execute(sql)            for x in c1c:                idN = int(x[0])            sql1 = "INSERT INTO reviewCountry(Date, Review_N_Username, countryID, Score, Description) VALUES (%s, %s, %s, %s, %s)"            c1c.execute(sql1, (countryDate, country_Review_N, idN, countryScore, desc))            c1c.close()            dbc.commit()            dbc.close()                        tkMessageBox.showwarning("Success","You have submitted an country review")            self.normHomePage()        except:             messagebox.showwarning("Error","You must enter in an appropriate value for each entry")    def writeReviewCity(self):        try:            self.normhomeWin.withdraw()        except:            None                self.writeReviewCity = Toplevel()        self.writeReviewCity.title("GTTravel.com Write a City Review") #       self.writeReviewCity.geometry('{}x{}'.format(500, 400))        frame = Frame(self.writeReviewCity)        frame.grid(row = 0, column = 0)        lab = Label(frame, text = "Write a Review for a City", font = "Verdana 24 bold")        lab.grid(row = 0, column = 0)        frame1 = Frame(self.writeReviewCity)        frame1.grid(row = 1, column = 0)        lab1 = Label(frame1, text = "City", font = "Verdana 12 bold")        lab1.grid(row = 0, column = 0)        lab2 = Label(frame1, text = "Date (yyyy-mm-dd)", font = "Verdana 12 bold")        lab2.grid(row = 1, column = 0)        lab3 = Label(frame1, text = "Score (1-10, 10 being the best)", font = "Verdana 12 bold")        lab3.grid(row = 2, column = 0)        lab4 = Label(frame1, text = "Description", font = "Verdana 12 bold")        lab4.grid(row = 3, column = 0)        dbc = self.Connect()         c1c = dbc.cursor()        sql = "SELECT City_Name FROM city"        c1c.execute(sql)        alist= []        for x in c1c:            alist.append(x[0])        c1c.close()        dbc.close()        self.cityReviewVar = StringVar()        self.cityReviewVar.set('')        option = OptionMenu(frame1, self.cityReviewVar, *alist)        option.config(width = 20)        option.grid(row = 0, column = 1)        self.CityDateEntry = StringVar()        dateEntry = Entry(frame1, textvariable = self.CityDateEntry, width = 10)        dateEntry.grid(row = 1, column = 1)        self.cityScoreEntry = StringVar()        scoreEntry = Entry(frame1, textvariable = self.cityScoreEntry, width = 2)        scoreEntry.grid(row = 2, column = 1)        self.cityDescriptionEntry = StringVar()        descriptionEntry = Entry(frame1, textvariable = self.cityDescriptionEntry, width = 30)        descriptionEntry.grid(row = 3, column = 1, rowspan = 3, columnspan = 2)        submit = Button(frame1, text = "Submit", command = self.citySubmit)        submit.grid(row = 6, column = 3)        goback = Button(frame1, text = "Go Back", command = self.normHomePage)        goback.grid(row = 6, column = 0, sticky=W, pady=5)    def citySubmit(self):        try:            cityDate = self.CityDateEntry.get()            city_Review_N = self.userName            cityScore = int(self.cityScoreEntry.get())            desc = self.cityDescriptionEntry.get()            cityReviewVar = self.cityReviewVar.get()            dbc = self.Connect()             c1c = dbc.cursor()            sql = "SELECT id FROM city WHERE City_Name = '{}'".format(cityReviewVar)            c1c.execute(sql)            for x in c1c:                idN = int(x[0])            sql1 = "INSERT INTO reviewCit(Date, Review_N_Username, cityID, Score, Description) VALUES (%s, %s, %s, %s, %s)"            c1c.execute(sql1, (cityDate, city_Review_N, idN, cityScore, desc))            c1c.close()            dbc.commit()            dbc.close()                        messagebox.showwarning("Success","You have submitted an city review")            self.normHomePage()        except:             messagebox.showwarning("Error","You must enter in an appropriate value for each entry")    def writeReviewLocation(self):        try:            self.normhomeWin.withdraw()        except:            None                self.writeReviewLocation = Toplevel()        self.writeReviewLocation.title("GTTravel.com Write a Location Review") #       self.writeReviewLocation.geometry('{}x{}'.format(500, 400))        frame = Frame(self.writeReviewLocation)        frame.grid(row = 0, column = 0)        lab = Label(frame, text = "Write a Review for a Location", font = "Verdana 24 bold")        lab.grid(row = 0, column = 0)        frame1 = Frame(self.writeReviewLocation)        frame1.grid(row = 1, column = 0)        lab1 = Label(frame1, text = "Location", font = "Verdana 12 bold")        lab1.grid(row = 0, column = 0)        lab2 = Label(frame1, text = "Date (yyyy-mm-dd)", font = "Verdana 12 bold")        lab2.grid(row = 1, column = 0)        lab3 = Label(frame1, text = "Score (1-10, 10 being the best)", font = "Verdana 12 bold")        lab3.grid(row = 2, column = 0)        lab4 = Label(frame1, text = "Description", font = "Verdana 12 bold")        lab4.grid(row = 3, column = 0)        dbc = self.Connect()         c1c = dbc.cursor()        sql = "SELECT Name, Address FROM location"        c1c.execute(sql)        alist= []        for x in c1c:            alist.append(x)        c1c.close()        dbc.close()        self.locationReviewVar = StringVar()        self.locationReviewVar.set('')        option = OptionMenu(frame1, self.locationReviewVar, *alist)        option.config(width = 20)        option.grid(row = 0, column = 1)        self.locationDateEntry = StringVar()        dateEntry = Entry(frame1, textvariable = self.locationDateEntry, width = 10)        dateEntry.grid(row = 1, column = 1)        self.locationScoreEntry = StringVar()        scoreEntry = Entry(frame1, textvariable = self.locationScoreEntry, width = 2)        scoreEntry.grid(row = 2, column = 1)        self.locationDescriptionEntry = StringVar()        descriptionEntry = Entry(frame1, textvariable = self.locationDescriptionEntry, width = 30)        descriptionEntry.grid(row = 3, column = 1, rowspan = 3, columnspan = 2)        submit = Button(frame1, text = "Submit", command = self.locationSubmit)        submit.grid(row = 6, column = 3)        goback = Button(frame1, text = "Go Back", command = self.normHomePage)        goback.grid(row = 6, column = 0, sticky=W, pady=5)    def locationSubmit(self):        try:            locDate = self.locationDateEntry.get()            loc_Review_N = self.userName            locScore = int(self.locationScoreEntry.get())            desc = self.locationDescriptionEntry.get()            locReviewVar = self.locationReviewVar.get()            r = locReviewVar.split(',')            name = r[0][2:-1]            address = r[1][2:-2]            dbc = self.Connect()             c1c = dbc.cursor()            name = name.replace("'", "''")            sql = "SELECT id FROM location WHERE Address = '{}' AND Name = '{}'".format(address,name)            c1c.execute(sql)            for x in c1c:                idN = int(x[0])            sql1 = "INSERT INTO reviewLoc(Date, Review_N_Username, locationID, Score, Description) VALUES (%s, %s, %s, %s, %s)"            c1c.execute(sql1, (locDate, loc_Review_N, idN, locScore, desc))            c1c.close()            dbc.commit()            dbc.close()                        messagebox.showwarning("Success","You have submitted an location review")            self.normHomePage()        except:             messagebox.showwarning("Error","You must enter in an appropriate value for each entry")    def writeReviewEvent(self):        try:            self.normhomeWin.withdraw()        except:            None                self.writeReviewEvent = Toplevel()        self.writeReviewEvent.title("GTTravel.com Write an Event Review") #      self.writeReviewEvent.geometry('{}x{}'.format(500, 400))        frame = Frame(self.writeReviewEvent)        frame.grid(row = 0, column = 0)        lab = Label(frame, text = "Write a Review for an Event", font = "Verdana 24 bold")        lab.grid(row = 0, column = 0)        frame1 = Frame(self.writeReviewEvent)        frame1.grid(row = 1, column = 0)        lab1 = Label(frame1, text = "Event", font = "Verdana 12 bold")        lab1.grid(row = 0, column = 0)        lab2 = Label(frame1, text = "Date (yyyy-mm-dd)", font = "Verdana 12 bold")        lab2.grid(row = 1, column = 0)        lab3 = Label(frame1, text = "Score (1-10, 10 being the best)", font = "Verdana 12 bold")        lab3.grid(row = 2, column = 0)        lab4 = Label(frame1, text = "Description", font = "Verdana 12 bold")        lab4.grid(row = 3, column = 0)        dbc = self.Connect()         c1c = dbc.cursor()        sql = "SELECT Address, Name, Date FROM event"        c1c.execute(sql)        alist= []        for x in c1c:            alist.append(x)        c1c.close()        dbc.close()        self.eventReviewVar = StringVar()        self.eventReviewVar.set('')        option = OptionMenu(frame1, self.eventReviewVar, *alist)        option.config(width = 20)        option.grid(row = 0, column = 1)        self.eventDateEntry = StringVar()        dateEntry = Entry(frame1, textvariable = self.eventDateEntry, width = 10)        dateEntry.grid(row = 1, column = 1)        self.eventScoreEntry = StringVar()        scoreEntry = Entry(frame1, textvariable = self.eventScoreEntry, width = 2)        scoreEntry.grid(row = 2, column = 1)        self.eventDescriptionEntry = StringVar()        descriptionEntry = Entry(frame1, textvariable = self.eventDescriptionEntry, width = 30)        descriptionEntry.grid(row = 3, column = 1, rowspan = 3, columnspan = 2)        submit = Button(frame1, text = "Submit", command = self.eventSubmit)        submit.grid(row = 6, column = 3)        goback = Button(frame1, text = "Go Back", command = self.normHomePage)        goback.grid(row = 6, column = 0, sticky=W, pady=5)    def eventSubmit(self):        try:            eventDate = self.eventDateEntry.get()            event_Review_N = self.userName            eventScore = int(self.eventScoreEntry.get())            desc = self.eventDescriptionEntry.get()            eventReviewVar = self.eventReviewVar.get()            r = eventReviewVar.split(',')            address = r[0][2:-1]            name = r[1][2:-1]            date = r[2][2:-2]            dbc = self.Connect()             c1c = dbc.cursor()            sql = "SELECT id FROM event WHERE Address = '{}' AND Name = '{}' AND Date = '{}'".format(address,name,date)            c1c.execute(sql)            for x in c1c:                idN = int(x[0])            sql1 = "INSERT INTO reviewEvent(Date, Review_N_Username, eventID, Score, Description) VALUES (%s, %s, %s, %s, %s)"            c1c.execute(sql1, (eventDate, event_Review_N, idN, eventScore, desc))            c1c.close()            dbc.commit()            dbc.close()                        messagebox.showwarning("Success","You have submitted an event review")            self.normHomePage()        except:             messagebox.showwarning("Error","You must enter in an appropriate value for each entry")            def addCity(self):        try:            self.mainWin.withdraw()        except:            None        try:            self.secondWin.withdraw()        except:            None        try:            self.manhomeWin.withdraw()        except:            None        self.addCityWin = Toplevel()        self.addCityWin.title("GTTravel.com Add City")#       self.addCityWin.geometry('{}x{}'.format(500, 400))        self.frameaddCity = Frame(self.addCityWin)        self.frameaddCity.grid(row = 0, column = 0)        acLab1 = Label(self.frameaddCity, text = "Add Cities", font = "Verdana 24 bold")        acLab1.grid(sticky=W, row = 0, column = 1)        acLab2 = Label(self.frameaddCity, text = "Name", font = "Verdana 12 bold")        acLab2.grid(sticky=W, row = 1, column = 0)        acLab3 = Label(self.frameaddCity, text = "Country", font = "Verdana 12 bold")        acLab3.grid(sticky=W, row = 2, column = 0)        acLab4 = Label(self.frameaddCity, text = "Population", font = "Verdana 12 bold")        acLab4.grid(sticky=W, row = 3, column = 0)        acLab5 = Label(self.frameaddCity, text = "GPS", font = "Verdana 12 bold")        acLab5.grid(sticky=W, row = 4, column = 0)        acLab6 = Label(self.frameaddCity, text = "Languages", font = "Verdana 12 bold")        acLab6.grid(sticky=W, row = 5, column = 0)        self.inputCityName = StringVar()        #country drop bar        self.dbac = self.Connect()         self.c1ac = self.dbac.cursor()        sql = "SELECT Country_Name FROM Country"        self.c1ac.execute(sql)        alist= []        for x in self.c1ac:            alist.append(x[0])        self.c1ac.close()        self.dbac.close()        self.countryvar = StringVar()        self.countryvar.set('')        option = OptionMenu(self.frameaddCity, self.countryvar, *alist)        option.config(width = 20)        option.grid(row = 2, column = 1)        self.inputPopulation = StringVar()        self.inputLatitude = StringVar()        self.inputLongitude = StringVar()        acEntry1 = Entry(self.frameaddCity, textvariable = self.inputCityName, state = NORMAL)        acEntry1.grid(sticky=W, row = 1,column = 1)        acEntry2 = Entry(self.frameaddCity, textvariable = self.inputPopulation, state = NORMAL)        acEntry2.grid(sticky=W, row = 3, column = 1)        acEntry3 = Entry(self.frameaddCity, textvariable = self.inputLatitude, state = NORMAL)        acEntry3.grid(sticky=W, row = 4, column = 1)        acEntry4 = Entry(self.frameaddCity, textvariable = self.inputLongitude, state = NORMAL)        acEntry4.grid(sticky=W, row = 4, column = 2)        self.var1 = IntVar()        self.lang1=Checkbutton(self.frameaddCity, text="English", variable=self.var1).grid(sticky=W, pady=5, row=5, column=1)        self.var2 = IntVar()        self.lang2=Checkbutton(self.frameaddCity, text="Spanish", variable=self.var2).grid(sticky=W, pady=5, row=6, column=1)        self.var3 = IntVar()        self.lang3=Checkbutton(self.frameaddCity, text="Catalan", variable=self.var3).grid(sticky=W, pady=5, row=7, column=1)        self.var4 = IntVar()        self.lang4=Checkbutton(self.frameaddCity, text="German", variable=self.var4).grid(sticky=W, pady=5, row=8, column=1)        self.var5 = IntVar()        self.lang5=Checkbutton(self.frameaddCity, text="Italian", variable=self.var5).grid(sticky=W, pady=5, row=9, column=1)        self.var6 = IntVar()        self.lang6=Checkbutton(self.frameaddCity, text="French", variable=self.var6).grid(sticky=W, pady=5, row=10, column=1)        self.var7 = IntVar()        self.lang7=Checkbutton(self.frameaddCity, text="Flemish", variable=self.var7).grid(sticky=W, pady=5, row=11, column=1)        self.var8 = IntVar()        self.lang8=Checkbutton(self.frameaddCity, text="Dutch", variable=self.var8).grid(sticky=W, pady=5, row=12, column=1)        self.var9 = IntVar()        self.lang9=Checkbutton(self.frameaddCity, text="Greek", variable=self.var9).grid(sticky=W, pady=5, row=13, column=1)        self.var10 = IntVar()        self.lang10=Checkbutton(self.frameaddCity, text="Valenician", variable=self.var10).grid(sticky=W, pady=5, row=14, column=1)        self.var11 = IntVar()        self.lang11=Checkbutton(self.frameaddCity, text="Galician", variable=self.var11).grid(sticky=W, pady=5, row=15, column=1)        self.var12 = IntVar()        self.lang12=Checkbutton(self.frameaddCity, text="Basque", variable=self.var12).grid(sticky=W, pady=5, row=16, column=1)        self.var13 = IntVar()        self.lang13=Checkbutton(self.frameaddCity, text="Euskara", variable=self.var13).grid(sticky=W, pady=5, row=17, column=1)        self.var14 = IntVar()        self.lang14=Checkbutton(self.frameaddCity, text="Gaelic", variable=self.var14).grid(sticky=W, pady=5, row=18, column=1)        self.var15 = IntVar()        self.lang15=Checkbutton(self.frameaddCity, text="Portuguese", variable=self.var15).grid(sticky=W, pady=5, row=19, column=1)        acSumbitButton = Button(self.frameaddCity, text = "Submit", command = self.addCitytoDb)        acSumbitButton.grid(row = 20, column = 3)    def addCitytoDb(self):        self.acCityName = self.inputCityName.get()        self.acPopulation = self.inputPopulation.get()        self.acLatitude = self.inputLatitude.get()        self.acLongitude = self.inputLongitude.get()        self.countrySelected = self.countryvar.get()        listoflanguages = []        Englishvar = self.var1.get()        if Englishvar == 1:            listoflanguages.append("English")        Spanishvar = self.var2.get()        if Spanishvar == 1:            listoflanguages.append("Spanish")        Catalanvar = self.var3.get()        if Catalanvar == 1:            listoflanguages.append("Catalan")        Germanvar = self.var4.get()        if Germanvar == 1:            listoflanguages.append("German")        Italianvar = self.var5.get()        if Italianvar == 1:            listoflanguages.append("Italian")        Frenchvar = self.var6.get()        if Frenchvar == 1:            listoflanguages.append("French")        Flemishvar = self.var7.get()        if Flemishvar == 1:            listoflanguages.append("Flemish")        Dutchvar = self.var8.get()        if Dutchvar == 1:            listoflanguages.append("Dutch")        Greekvar = self.var9.get()        if Greekvar == 1:            listoflanguages.append("Greek")        Valenicianvar = self.var10.get()        if Valenicianvar == 1:            listoflanguages.append("Valenician")        Galicianvar = self.var11.get()        if Galicianvar == 1:            listoflanguages.append("Galicianvar")        Basquevar = self.var12.get()        if Basquevar == 1:            listoflanguages.append("Basque")        Euskaravar = self.var13.get()        if Euskaravar == 1:            listoflanguages.append("Euskara")        Gaelicvar = self.var14.get()        if Gaelicvar == 1:            listoflanguages.append("Gaelic")        Portuguesevar = self.var15.get()        if Portuguesevar == 1:            listoflanguages.append("Portuguese")        if self.acCityName == '' or self.acPopulation == '' or self.acLatitude == '' or self.acLongitude == '' or self.countrySelected == '' or listoflanguages == []:            messagebox.showwarning("Error","You must enter in an appropriate value for each entry")        else:            try:                dbAC1 = self.Connect()                 cAC1 = dbAC1.cursor()                sql = "INSERT INTO City(city_country_name, City_Name, latitude, longitude, City_M_Username, Population) VALUES (%s,%s,%s,%s,%s,%s)"                cAC1.execute(sql,(self.countrySelected, self.acCityName, self.acLatitude, self.acLongitude, self.userName, self.acPopulation))                for x in listoflanguages:                    try:                        sql2 = "INSERT INTO CountryLanguage(CountryLanguage_Country_Name, Lang_Name) VALUES (%s,%s)"                        cAC1.execute(sql2,(self.countrySelected,x))                    except:                        None                    try:                        sql3 = "INSERT INTO CityLanguage(CityLanguage_City_Name, City_Lang_Name) VALUES (%s,%s)"                        cAC1.execute(sql3, (self.acCityName, x))                    except:                        None                cAC1.close()                dbAC1.commit()                dbAC1.close()                messagebox.showwarning("Success","You have added a city!")                self.manHomePage()            except:                messagebox.showwarning("Error","You must enter in an appropriate value for each entry")            def Exit(self):        try:            self.mainWin.withdraw()        except:            None        try:            self.secondWin.withdraw()        except:            None        try:            self.manhomeWin.withdraw()        except:            None        try:            self.normhomeWin.withdraw()        except:            None        try:            self.addCityWin.withdraw()        except:            None        try:            self.homeWin.withdraw()        except:            None        raise SystemExit    def previousReview(self):        try:            self.normhomeWin.withdraw()##put in previous window name to withdraw        except:            None        self.db = self.Connect()        self.cur = self.db.cursor()                myApp.tree_columns = ("Subject", "Date", "Score", "Description")        myApp.tree_data = []        self.cur.execute("SELECT C.Country_Name, R.Date, R.Score, R.Description, R.countryID FROM reviewcountry AS R, Country AS C WHERE (R.Review_N_Username = '"+self.userName+"') AND (C.id = R.countryID);")        for x in self.cur:            myApp.tree_data.append(x)        self.cur.execute("SELECT C.City_Name, R.Date, R.Score, R.Description, R.cityID FROM reviewcit AS R, City AS C WHERE (R.Review_N_Username = '"+self.userName+"') AND (C.id = R.cityID);")        for x in self.cur:            myApp.tree_data.append(x)        self.cur.execute("SELECT L.Name, R.Date, R.Score, R.Description, R.locationID FROM reviewloc AS R, Location AS L WHERE (R.Review_N_Username = '"+self.userName+"') AND (L.id = R.locationID);")        for x in self.cur:            myApp.tree_data.append(x)        self.cur.execute("SELECT E.Name, R.Date, R.Score, R.Description, R.eventID FROM reviewevent AS R, Event AS E WHERE (R.Review_N_Username = '"+self.userName+"') AND (E.id = R.eventID);")        for x in self.cur:            myApp.tree_data.append(x)                self.cur.close()        self.db.commit()        self.db.close()        self.runTable(self.update)    def backReview(self):        self.preReviewWin.withdraw()        self.normhomeWin.deiconify()        return None    def update(self,object):        self.updateReviewWin = Toplevel()        self.updateReviewWin.title("GTTravel.com Update Review")        frame = Frame(self.updateReviewWin)        frame.grid(row = 0, column = 0)        title = Label(frame, text = "Update Review", font = "Verdana 24 bold")        title.grid(row = 0, column = 0)        frame1 = Frame(self.updateReviewWin)        frame1.grid(row = 1, column = 0)        lab1 = Label(frame1, text = "Subject", font = "Verdana 12 bold")        lab1.grid(row = 0, column = 0)        lab2 = Label(frame1, text = "Date (yyyy-mm-dd)", font = "Verdana 12 bold")        lab2.grid(row = 1, column = 0)        lab3 = Label(frame1, text = "Score (1-10, 10 being the best)", font = "Verdana 12 bold")        lab3.grid(row = 2, column = 0)        lab4 = Label(frame1, text = "Description", font = "Verdana 12 bold")        lab4.grid(row = 3, column = 0)        #put in the subject that was selected        lab5 = Label(frame1, text = object)        lab5.grid(row = 0, column = 1)        self.eventDateEntry = StringVar()        dateEntry = Entry(frame1, textvariable = self.eventDateEntry, width = 10)        dateEntry.grid(row = 1, column = 1)        self.eventScoreEntry = StringVar()        scoreEntry = Entry(frame1, textvariable = self.eventScoreEntry, width = 2)        scoreEntry.grid(row = 2, column = 1)        self.eventDescriptionEntry = StringVar()        descriptionEntry = Entry(frame1, textvariable = self.eventDescriptionEntry, width = 30)        descriptionEntry.grid(row = 3, column = 1, rowspan = 3, columnspan = 2)        self.name = object        self.origRevdate = (self.tree.item(self.tree.selection()))['values'][1]        self.idUpdateReview = (self.tree.item(self.tree.selection()))['values'][4]        frame2 = Frame(self.updateReviewWin)        frame2.grid(row = 2, column = 0)        selectB=Button(frame2, text="Update", command=self.updateReview).grid(row=1, column=1)            def updateReview(self):        try:            db = self.Connect()            c = db.cursor()            sql = "SELECT City_Name FROM city"            c.execute(sql)            listCities = []            for x in c:                listCities.append(x[0])            sql = "SELECT Country_Name FROM country"            c.execute(sql)            listCountries = []            for x in c:                listCountries.append(x[0])            sql = "SELECT Name FROM location"            c.execute(sql)            listLocations = []            for x in c:                listLocations.append(x[0])            sql = "SELECT Name FROM event"            c.execute(sql)            listEvents= []            for x in c:                listEvents.append(x[0])            if self.name in listCities:                if self.eventScoreEntry.get():                    sql = "UPDATE reviewCit SET Score={} WHERE cityID = '{}' AND Review_N_Username = '{}' AND Date = '{}'".format(self.eventScoreEntry.get(), self.idUpdateReview, self.userName, self.origRevdate)                    c.execute(sql)                if self.eventDescriptionEntry.get():                    sql = "UPDATE reviewCit SET Description='{}' WHERE cityID = '{}' AND Review_N_Username = '{}' AND Date = '{}'".format(self.eventDescriptionEntry.get(), self.idUpdateReview, self.userName, self.origRevdate)                    c.execute(sql)                if self.eventDateEntry.get():                    sql = "UPDATE reviewCit SET Date='{}' WHERE cityID = '{}' AND Review_N_Username = '{}' AND Date = '{}'".format(self.eventDateEntry.get(), self.idUpdateReview, self.userName, self.origRevdate)                    c.execute(sql)            elif self.name in listCountries:                if self.eventScoreEntry.get():                    sql = "UPDATE reviewCountry SET Score={} WHERE countryID = '{}' AND Review_N_Username = '{}' AND Date = '{}'".format(self.eventScoreEntry.get(), self.idUpdateReview, self.userName, self.origRevdate)                    c.execute(sql)                if self.eventDescriptionEntry.get():                    sql = "UPDATE reviewCountry SET Description='{}' WHERE countryID = '{}' AND Review_N_Username = '{}' AND Date = '{}'".format(self.eventDescriptionEntry.get(), self.idUpdateReview, self.userName, self.origRevdate)                    c.execute(sql)                if self.eventDateEntry.get():                    sql = "UPDATE reviewCountry SET Date='{}' WHERE countryID = '{}' AND Review_N_Username = '{}' AND Date = '{}'".format(self.eventDateEntry.get(), self.idUpdateReview, self.userName, self.origRevdate)                    c.execute(sql)                            elif self.name in listLocations:                if self.eventScoreEntry.get():                    sql = "UPDATE reviewLoc SET Score={} WHERE locationID = '{}' AND Review_N_Username = '{}' AND Date = '{}'".format(self.eventScoreEntry.get(), self.idUpdateReview, self.userName, self.origRevdate)                    c.execute(sql)                if self.eventDescriptionEntry.get():                    sql = "UPDATE reviewLoc SET Description='{}' WHERE locationID = '{}' AND Review_N_Username = '{}' AND Date = '{}'".format(self.eventDescriptionEntry.get(), self.idUpdateReview, self.userName, self.origRevdate)                    c.execute(sql)                if self.eventDateEntry.get():                    sql = "UPDATE reviewLoc SET Date='{}' WHERE locationID = '{}' AND Review_N_Username = '{}' AND Date = '{}'".format(self.eventDateEntry.get(), self.idUpdateReview, self.userName, self.origRevdate)                    c.execute(sql)            elif self.name in listEvents:                if self.eventScoreEntry.get():                    sql = "UPDATE reviewEvent SET Score={} WHERE eventID = '{}' AND Review_N_Username = '{}' AND Date = '{}'".format(self.eventScoreEntry.get(), self.idUpdateReview, self.userName, self.origRevdate)                    c.execute(sql)                if self.eventDescriptionEntry.get():                    sql = "UPDATE reviewEvent SET Description='{}' WHERE eventID = '{}' AND Review_N_Username = '{}' AND Date = '{}'".format(self.eventDescriptionEntry.get(), self.idUpdateReview, self.userName, self.origRevdate)                    c.execute(sql)                if self.eventDateEntry.get():                    sql = "UPDATE reviewEvent SET Date='{}' WHERE eventID = '{}' AND Review_N_Username = '{}' AND Date = '{}'".format(self.eventDateEntry.get(), self.idUpdateReview, self.userName, self.origRevdate)                    c.execute(sql)                                c.close()            db.commit()            db.close()            messagebox.showwarning("Success","You have updated your review!")            self.updateReviewWin.withdraw()            self.yus.withdraw()            self.normhomeWin.deiconify()        except:            messagebox.showwarning("Error","There are no events that match those parameters")            def backPreRev(self):        self.prevReviewWin.withdraw()        self.normhomeWin.deiconify()        return None                win = Tk()#win.geometry('{}x{}'.format(500, 400))mainWin = myApp(win)win.mainloop()